(*goflags.FlagSet)(0xc00090b560)({
 Marshal: (bool) false,
 description: (string) (len=132) "Nuclei is a fast, template based vulnerability scanner focusing\non extensive configurability, massive extensibility and ease of use.",
 flagKeys: (goflags.InsertionOrderedMap) {
  values: (map[string]*goflags.FlagData) (len=186) {
   (string) (len=4) "json": (*goflags.FlagData)(0xc000465e30)({
    usage: (string) (len=34) "write output in JSONL(ines) format",
    short: (string) "",
    long: (string) (len=4) "json",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=9) "resolvers": (*goflags.FlagData)(0xc00054a690)({
    usage: (string) (len=40) "file containing resolver list for nuclei",
    short: (string) (len=1) "r",
    long: (string) (len=9) "resolvers",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=7) "iserver": (*goflags.FlagData)(0xc00054ab60)({
    usage: (string) (len=115) "interactsh server url for self-hosted instance (default: oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me)",
    short: (string) (len=7) "iserver",
    long: (string) (len=17) "interactsh-server",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "ud": (*goflags.FlagData)(0xc00059c3f0)({
    usage: (string) (len=59) "overwrite the default directory to install nuclei-templates",
    short: (string) (len=2) "ud",
    long: (string) (len=16) "update-directory",
    group: (string) (len=6) "update",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "m": (*goflags.FlagData)(0xc00059c7e0)({
    usage: (string) (len=31) "expose nuclei metrics on a port",
    short: (string) (len=1) "m",
    long: (string) (len=7) "metrics",
    group: (string) (len=5) "stats",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "exclude-tags": (*goflags.FlagData)(0xc000465570)({
    usage: (string) (len=58) "templates to exclude based on tags (comma-separated, file)",
    short: (string) (len=5) "etags",
    long: (string) (len=12) "exclude-tags",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "sb": (*goflags.FlagData)(0xc00054b8f0)({
    usage: (string) (len=72) "show the browser on the screen when running templates with headless mode",
    short: (string) (len=2) "sb",
    long: (string) (len=12) "show-browser",
    group: (string) (len=8) "headless",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=4) "dreq": (*goflags.FlagData)(0xc00054bab0)({
    usage: (string) (len=22) "show all sent requests",
    short: (string) (len=4) "dreq",
    long: (string) (len=9) "debug-req",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=7) "verbose": (*goflags.FlagData)(0xc00054bf10)({
    usage: (string) (len=19) "show verbose output",
    short: (string) (len=1) "v",
    long: (string) (len=7) "verbose",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=17) "templates-version": (*goflags.FlagData)(0xc00059c070)({
    usage: (string) (len=51) "shows the version of the installed nuclei-templates",
    short: (string) (len=2) "tv",
    long: (string) (len=17) "templates-version",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=5) "stats": (*goflags.FlagData)(0xc00059c540)({
    usage: (string) (len=41) "display statistics about the running scan",
    short: (string) "",
    long: (string) (len=5) "stats",
    group: (string) (len=5) "stats",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=10) "stats-json": (*goflags.FlagData)(0xc00059c620)({
    usage: (string) (len=61) "write statistics data to an output file in JSONL(ines) format",
    short: (string) (len=2) "sj",
    long: (string) (len=10) "stats-json",
    group: (string) (len=5) "stats",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "metrics-port": (*goflags.FlagData)(0xc00059c8c0)({
    usage: (string) (len=32) "port to expose nuclei metrics on",
    short: (string) (len=2) "mp",
    long: (string) (len=12) "metrics-port",
    group: (string) (len=5) "stats",
    defaultValue: (string) (len=4) "9092",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "as": (*goflags.FlagData)(0xc000464d90)({
    usage: (string) (len=72) "automatic web scan using wappalyzer technology detection to tags mapping",
    short: (string) (len=2) "as",
    long: (string) (len=14) "automatic-scan",
    group: (string) (len=9) "templates",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "output": (*goflags.FlagData)(0xc000465b20)({
    usage: (string) (len=49) "output file to write found issues/vulnerabilities",
    short: (string) (len=1) "o",
    long: (string) (len=6) "output",
    group: (string) (len=6) "output",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "nc": (*goflags.FlagData)(0xc000465ce0)({
    usage: (string) (len=51) "disable output content coloring (ANSI escape codes)",
    short: (string) (len=2) "nc",
    long: (string) (len=8) "no-color",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "sml": (*goflags.FlagData)(0xc00054a9a0)({
    usage: (string) (len=63) "show match lines for file templates, works with extractors only",
    short: (string) (len=3) "sml",
    long: (string) (len=15) "show-match-line",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=5) "dresp": (*goflags.FlagData)(0xc00054bb90)({
    usage: (string) (len=27) "show all received responses",
    short: (string) (len=5) "dresp",
    long: (string) (len=10) "debug-resp",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=5) "proxy": (*goflags.FlagData)(0xc00054bc00)({
    usage: (string) (len=64) "list of http/socks5 proxy to use (comma separated or file input)",
    short: (string) (len=1) "p",
    long: (string) (len=5) "proxy",
    group: (string) (len=5) "debug",
    defaultValue: (goflags.NormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=14) "automatic-scan": (*goflags.FlagData)(0xc000464d90)({
    usage: (string) (len=72) "automatic web scan using wappalyzer technology detection to tags mapping",
    short: (string) (len=2) "as",
    long: (string) (len=14) "automatic-scan",
    group: (string) (len=9) "templates",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=9) "workflows": (*goflags.FlagData)(0xc000465030)({
    usage: (string) (len=69) "list of workflow or workflow directory to run (comma-separated, file)",
    short: (string) (len=1) "w",
    long: (string) (len=9) "workflows",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "o": (*goflags.FlagData)(0xc000465b20)({
    usage: (string) (len=49) "output file to write found issues/vulnerabilities",
    short: (string) (len=1) "o",
    long: (string) (len=6) "output",
    group: (string) (len=6) "output",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "cc": (*goflags.FlagData)(0xc00054a850)({
    usage: (string) (len=83) "client certificate file (PEM-encoded) used for authenticating against scanned hosts",
    short: (string) (len=2) "cc",
    long: (string) (len=11) "client-cert",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "bs": (*goflags.FlagData)(0xc00054afc0)({
    usage: (string) (len=63) "maximum number of hosts to be analyzed in parallel per template",
    short: (string) (len=2) "bs",
    long: (string) (len=9) "bulk-size",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=2) "25",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=14) "max-host-error": (*goflags.FlagData)(0xc00054b420)({
    usage: (string) (len=47) "max errors for a host before skipping from scan",
    short: (string) (len=3) "mhe",
    long: (string) (len=14) "max-host-error",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=2) "30",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "em": (*goflags.FlagData)(0xc000465810)({
    usage: (string) (len=38) "template matchers to exclude in result",
    short: (string) (len=2) "em",
    long: (string) (len=16) "exclude-matchers",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileCommaSeparatedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "silent": (*goflags.FlagData)(0xc000465c70)({
    usage: (string) (len=21) "display findings only",
    short: (string) "",
    long: (string) (len=6) "silent",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=17) "disable-redirects": (*goflags.FlagData)(0xc00054a4d0)({
    usage: (string) (len=36) "disable redirects for http templates",
    short: (string) (len=2) "dr",
    long: (string) (len=17) "disable-redirects",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "rlm": (*goflags.FlagData)(0xc00054aee0)({
    usage: (string) (len=45) "maximum number of requests to send per minute",
    short: (string) (len=3) "rlm",
    long: (string) (len=17) "rate-limit-minute",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=1) "0",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=8) "severity": (*goflags.FlagData)(0xc000465880)({
    usage: (string) (len=95) "templates to run based on severity. Possible values: info, low, medium, high, critical, unknown",
    short: (string) (len=1) "s",
    long: (string) (len=8) "severity",
    group: (string) (len=7) "filters",
    defaultValue: (*severity.Severities)(0x2e15c00)(),
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "pt": (*goflags.FlagData)(0xc000465a40)({
    usage: (string) (len=125) "templates to run based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois",
    short: (string) (len=2) "pt",
    long: (string) (len=4) "type",
    group: (string) (len=7) "filters",
    defaultValue: (*types.ProtocolTypes)(0x2e15c48)(),
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=21) "interactions-eviction": (*goflags.FlagData)(0xc00054acb0)({
    usage: (string) (len=61) "number of seconds to wait before evicting requests from cache",
    short: (string) "",
    long: (string) (len=21) "interactions-eviction",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) (len=2) "60",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=18) "headless-bulk-size": (*goflags.FlagData)(0xc00054b180)({
    usage: (string) (len=72) "maximum number of headless hosts to be analyzed in parallel per template",
    short: (string) (len=3) "hbs",
    long: (string) (len=18) "headless-bulk-size",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=2) "10",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "show-browser": (*goflags.FlagData)(0xc00054b8f0)({
    usage: (string) (len=72) "show the browser on the screen when running templates with headless mode",
    short: (string) (len=2) "sb",
    long: (string) (len=12) "show-browser",
    group: (string) (len=8) "headless",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "sc": (*goflags.FlagData)(0xc00054b960)({
    usage: (string) (len=62) "Use local installed chrome browser instead of nuclei installed",
    short: (string) (len=2) "sc",
    long: (string) (len=13) "system-chrome",
    group: (string) (len=8) "headless",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "duc": (*goflags.FlagData)(0xc00059c460)({
    usage: (string) (len=47) "disable automatic nuclei/templates update check",
    short: (string) (len=3) "duc",
    long: (string) (len=20) "disable-update-check",
    group: (string) (len=6) "update",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=15) "markdown-export": (*goflags.FlagData)(0xc00054a150)({
    usage: (string) (len=46) "directory to export results in markdown format",
    short: (string) (len=2) "me",
    long: (string) (len=15) "markdown-export",
    group: (string) (len=6) "output",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=15) "show-match-line": (*goflags.FlagData)(0xc00054a9a0)({
    usage: (string) (len=63) "show match lines for file templates, works with extractors only",
    short: (string) (len=3) "sml",
    long: (string) (len=15) "show-match-line",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=7) "project": (*goflags.FlagData)(0xc00054b490)({
    usage: (string) (len=65) "use a project folder to avoid sending same request multiple times",
    short: (string) "",
    long: (string) (len=7) "project",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "exclude-type": (*goflags.FlagData)(0xc000465ab0)({
    usage: (string) (len=129) "templates to exclude based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois",
    short: (string) (len=3) "ept",
    long: (string) (len=12) "exclude-type",
    group: (string) (len=7) "filters",
    defaultValue: (*types.ProtocolTypes)(0x2e15c60)(),
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "ck": (*goflags.FlagData)(0xc00054a8c0)({
    usage: (string) (len=75) "client key file (PEM-encoded) used for authenticating against scanned hosts",
    short: (string) (len=2) "ck",
    long: (string) (len=10) "client-key",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=10) "debug-resp": (*goflags.FlagData)(0xc00054bb90)({
    usage: (string) (len=27) "show all received responses",
    short: (string) (len=5) "dresp",
    long: (string) (len=10) "debug-resp",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "sj": (*goflags.FlagData)(0xc00059c620)({
    usage: (string) (len=61) "write statistics data to an output file in JSONL(ines) format",
    short: (string) (len=2) "sj",
    long: (string) (len=10) "stats-json",
    group: (string) (len=5) "stats",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "l": (*goflags.FlagData)(0xc000464850)({
    usage: (string) (len=74) "path to file containing a list of target URLs/hosts to scan (one per line)",
    short: (string) (len=1) "l",
    long: (string) (len=4) "list",
    group: (string) (len=5) "input",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=9) "client-ca": (*goflags.FlagData)(0xc00054a930)({
    usage: (string) (len=93) "client certificate authority file (PEM-encoded) used for authenticating against scanned hosts",
    short: (string) (len=2) "ca",
    long: (string) (len=9) "client-ca",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=4) "ztls": (*goflags.FlagData)(0xc00054aa10)({
    usage: (string) (len=60) "use ztls library with autofallback to standard one for tls13",
    short: (string) "",
    long: (string) (len=4) "ztls",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "id": (*goflags.FlagData)(0xc000465650)({
    usage: (string) (len=62) "templates to run based on template ids (comma-separated, file)",
    short: (string) (len=2) "id",
    long: (string) (len=11) "template-id",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=16) "exclude-matchers": (*goflags.FlagData)(0xc000465810)({
    usage: (string) (len=38) "template matchers to exclude in result",
    short: (string) (len=2) "em",
    long: (string) (len=16) "exclude-matchers",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileCommaSeparatedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "es": (*goflags.FlagData)(0xc0004659d0)({
    usage: (string) (len=99) "templates to exclude based on severity. Possible values: info, low, medium, high, critical, unknown",
    short: (string) (len=2) "es",
    long: (string) (len=16) "exclude-severity",
    group: (string) (len=7) "filters",
    defaultValue: (*severity.Severities)(0x2e15c18)(),
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=28) "interactions-cooldown-period": (*goflags.FlagData)(0xc00054ad90)({
    usage: (string) (len=49) "extra time for interaction polling before exiting",
    short: (string) "",
    long: (string) (len=28) "interactions-cooldown-period",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) (len=1) "5",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=9) "bulk-size": (*goflags.FlagData)(0xc00054afc0)({
    usage: (string) (len=63) "maximum number of hosts to be analyzed in parallel per template",
    short: (string) (len=2) "bs",
    long: (string) (len=9) "bulk-size",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=2) "25",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=13) "new-templates": (*goflags.FlagData)(0xc000464930)({
    usage: (string) (len=63) "run only new templates added in latest nuclei-templates release",
    short: (string) (len=2) "nt",
    long: (string) (len=13) "new-templates",
    group: (string) (len=9) "templates",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "t": (*goflags.FlagData)(0xc000464e70)({
    usage: (string) (len=69) "list of template or template directory to run (comma-separated, file)",
    short: (string) (len=1) "t",
    long: (string) (len=9) "templates",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "author": (*goflags.FlagData)(0xc000465340)({
    usage: (string) (len=57) "templates to run based on authors (comma-separated, file)",
    short: (string) (len=1) "a",
    long: (string) (len=6) "author",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=8) "env-vars": (*goflags.FlagData)(0xc00054a7e0)({
    usage: (string) (len=51) "enable environment variables to be used in template",
    short: (string) (len=2) "ev",
    long: (string) (len=8) "env-vars",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=10) "client-key": (*goflags.FlagData)(0xc00054a8c0)({
    usage: (string) (len=75) "client key file (PEM-encoded) used for authenticating against scanned hosts",
    short: (string) (len=2) "ck",
    long: (string) (len=10) "client-key",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=7) "retries": (*goflags.FlagData)(0xc00054b340)({
    usage: (string) (len=41) "number of times to retry a failed request",
    short: (string) "",
    long: (string) (len=7) "retries",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=1) "1",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "tv": (*goflags.FlagData)(0xc00059c070)({
    usage: (string) (len=51) "shows the version of the installed nuclei-templates",
    short: (string) (len=2) "tv",
    long: (string) (len=17) "templates-version",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "ntv": (*goflags.FlagData)(0xc000464a10)({
    usage: (string) (len=43) "run new templates added in specific version",
    short: (string) (len=3) "ntv",
    long: (string) (len=21) "new-templates-version",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.CommaSeparatedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=10) "store-resp": (*goflags.FlagData)(0xc000465b90)({
    usage: (string) (len=68) "store all request/response passed through nuclei to output directory",
    short: (string) (len=5) "sresp",
    long: (string) (len=10) "store-resp",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=14) "store-resp-dir": (*goflags.FlagData)(0xc000465c00)({
    usage: (string) (len=68) "store all request/response passed through nuclei to custom directory",
    short: (string) (len=3) "srd",
    long: (string) (len=14) "store-resp-dir",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=6) "output",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "enable-pprof": (*goflags.FlagData)(0xc00059c000)({
    usage: (string) (len=29) "enable pprof debugging server",
    short: (string) (len=2) "ep",
    long: (string) (len=12) "enable-pprof",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "mp": (*goflags.FlagData)(0xc00059c8c0)({
    usage: (string) (len=32) "port to expose nuclei metrics on",
    short: (string) (len=2) "mp",
    long: (string) (len=12) "metrics-port",
    group: (string) (len=5) "stats",
    defaultValue: (string) (len=4) "9092",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=21) "new-templates-version": (*goflags.FlagData)(0xc000464a10)({
    usage: (string) (len=43) "run new templates added in specific version",
    short: (string) (len=3) "ntv",
    long: (string) (len=21) "new-templates-version",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.CommaSeparatedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "et": (*goflags.FlagData)(0xc0004657a0)({
    usage: (string) (len=65) "template or template directory to exclude (comma-separated, file)",
    short: (string) (len=2) "et",
    long: (string) (len=17) "exclude-templates",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "s": (*goflags.FlagData)(0xc000465880)({
    usage: (string) (len=95) "templates to run based on severity. Possible values: info, low, medium, high, critical, unknown",
    short: (string) (len=1) "s",
    long: (string) (len=8) "severity",
    group: (string) (len=7) "filters",
    defaultValue: (*severity.Severities)(0x2e15c00)(),
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "p": (*goflags.FlagData)(0xc00054bc00)({
    usage: (string) (len=64) "list of http/socks5 proxy to use (comma separated or file input)",
    short: (string) (len=1) "p",
    long: (string) (len=5) "proxy",
    group: (string) (len=5) "debug",
    defaultValue: (goflags.NormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "spm": (*goflags.FlagData)(0xc00054b570)({
    usage: (string) (len=87) "stop processing HTTP requests after the first match (may break template/workflow logic)",
    short: (string) (len=3) "spm",
    long: (string) (len=18) "stop-at-first-path",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=4) "list": (*goflags.FlagData)(0xc000464850)({
    usage: (string) (len=74) "path to file containing a list of target URLs/hosts to scan (one per line)",
    short: (string) (len=1) "l",
    long: (string) (len=4) "list",
    group: (string) (len=5) "input",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=10) "exclude-id": (*goflags.FlagData)(0xc0004656c0)({
    usage: (string) (len=66) "templates to exclude based on template ids (comma-separated, file)",
    short: (string) (len=3) "eid",
    long: (string) (len=10) "exclude-id",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=4) "type": (*goflags.FlagData)(0xc000465a40)({
    usage: (string) (len=125) "templates to run based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois",
    short: (string) (len=2) "pt",
    long: (string) (len=4) "type",
    group: (string) (len=7) "filters",
    defaultValue: (*types.ProtocolTypes)(0x2e15c48)(),
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "nm": (*goflags.FlagData)(0xc000465f80)({
    usage: (string) (len=46) "disable printing result metadata in cli output",
    short: (string) (len=2) "nm",
    long: (string) (len=7) "no-meta",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "nts": (*goflags.FlagData)(0xc00054a000)({
    usage: (string) (len=40) "disable printing timestamp in cli output",
    short: (string) (len=3) "nts",
    long: (string) (len=12) "no-timestamp",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=9) "report-db": (*goflags.FlagData)(0xc00054a070)({
    usage: (string) (len=66) "nuclei reporting database (always use this to persist report data)",
    short: (string) (len=3) "rdb",
    long: (string) (len=9) "report-db",
    group: (string) (len=6) "output",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "sr": (*goflags.FlagData)(0xc00054a700)({
    usage: (string) (len=42) "use system DNS resolving as error fallback",
    short: (string) (len=2) "sr",
    long: (string) (len=16) "system-resolvers",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "resume": (*goflags.FlagData)(0xc0004648c0)({
    usage: (string) (len=58) "Resume scan using resume.cfg (clustering will be disabled)",
    short: (string) "",
    long: (string) (len=6) "resume",
    group: (string) (len=5) "input",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "tl": (*goflags.FlagData)(0xc000465260)({
    usage: (string) (len=28) "list all available templates",
    short: (string) "",
    long: (string) (len=2) "tl",
    group: (string) (len=9) "templates",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "irr": (*goflags.FlagData)(0xc000465ea0)({
    usage: (string) (len=70) "include request/response pairs in the JSONL output (for findings only)",
    short: (string) (len=3) "irr",
    long: (string) (len=10) "include-rr",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=13) "report-config": (*goflags.FlagData)(0xc00054a540)({
    usage: (string) (len=42) "nuclei reporting module configuration file",
    short: (string) (len=2) "rc",
    long: (string) (len=13) "report-config",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "page-timeout": (*goflags.FlagData)(0xc00054b880)({
    usage: (string) (len=46) "seconds to wait for each page in headless mode",
    short: (string) "",
    long: (string) (len=12) "page-timeout",
    group: (string) (len=8) "headless",
    defaultValue: (string) (len=2) "20",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "a": (*goflags.FlagData)(0xc000465340)({
    usage: (string) (len=57) "templates to run based on authors (comma-separated, file)",
    short: (string) (len=1) "a",
    long: (string) (len=6) "author",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "eid": (*goflags.FlagData)(0xc0004656c0)({
    usage: (string) (len=66) "templates to exclude based on template ids (comma-separated, file)",
    short: (string) (len=3) "eid",
    long: (string) (len=10) "exclude-id",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=17) "exclude-templates": (*goflags.FlagData)(0xc0004657a0)({
    usage: (string) (len=65) "template or template directory to exclude (comma-separated, file)",
    short: (string) (len=2) "et",
    long: (string) (len=17) "exclude-templates",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "dr": (*goflags.FlagData)(0xc00054a4d0)({
    usage: (string) (len=36) "disable redirects for http templates",
    short: (string) (len=2) "dr",
    long: (string) (len=17) "disable-redirects",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "stream": (*goflags.FlagData)(0xc00054b5e0)({
    usage: (string) (len=57) "stream mode - start elaborating without sorting the input",
    short: (string) "",
    long: (string) (len=6) "stream",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=13) "system-chrome": (*goflags.FlagData)(0xc00054b960)({
    usage: (string) (len=62) "Use local installed chrome browser instead of nuclei installed",
    short: (string) (len=2) "sc",
    long: (string) (len=13) "system-chrome",
    group: (string) (len=8) "headless",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=20) "disable-update-check": (*goflags.FlagData)(0xc00059c460)({
    usage: (string) (len=47) "disable automatic nuclei/templates update check",
    short: (string) (len=3) "duc",
    long: (string) (len=20) "disable-update-check",
    group: (string) (len=6) "update",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "u": (*goflags.FlagData)(0xc0004647e0)({
    usage: (string) (len=25) "target URLs/hosts to scan",
    short: (string) (len=1) "u",
    long: (string) (len=6) "target",
    group: (string) (len=5) "input",
    defaultValue: (goflags.StringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "rdb": (*goflags.FlagData)(0xc00054a070)({
    usage: (string) (len=66) "nuclei reporting database (always use this to persist report data)",
    short: (string) (len=3) "rdb",
    long: (string) (len=9) "report-db",
    group: (string) (len=6) "output",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=10) "rate-limit": (*goflags.FlagData)(0xc00054ae70)({
    usage: (string) (len=45) "maximum number of requests to send per second",
    short: (string) (len=2) "rl",
    long: (string) (len=10) "rate-limit",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=3) "150",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "project-path": (*goflags.FlagData)(0xc00054b500)({
    usage: (string) (len=27) "set a specific project path",
    short: (string) "",
    long: (string) (len=12) "project-path",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=35) "C:\\Users\\welcome\\AppData\\Local\\Temp",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "wu": (*goflags.FlagData)(0xc0004650a0)({
    usage: (string) (len=52) "list of workflow urls to run (comma-separated, file)",
    short: (string) (len=2) "wu",
    long: (string) (len=12) "workflow-url",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=5) "itags": (*goflags.FlagData)(0xc0004655e0)({
    usage: (string) (len=80) "tags to be executed even if they are excluded either by default or configuration",
    short: (string) (len=5) "itags",
    long: (string) (len=12) "include-tags",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "it": (*goflags.FlagData)(0xc000465730)({
    usage: (string) (len=85) "templates to be executed even if they are excluded either by default or configuration",
    short: (string) (len=2) "it",
    long: (string) (len=17) "include-templates",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "srd": (*goflags.FlagData)(0xc000465c00)({
    usage: (string) (len=68) "store all request/response passed through nuclei to custom directory",
    short: (string) (len=3) "srd",
    long: (string) (len=14) "store-resp-dir",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=6) "output",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "ms": (*goflags.FlagData)(0xc00054a0e0)({
    usage: (string) (len=28) "display match failure status",
    short: (string) (len=2) "ms",
    long: (string) (len=14) "matcher-status",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "sni": (*goflags.FlagData)(0xc00054aaf0)({
    usage: (string) (len=52) "tls sni hostname to use (default: input domain name)",
    short: (string) "",
    long: (string) (len=3) "sni",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=17) "interactsh-server": (*goflags.FlagData)(0xc00054ab60)({
    usage: (string) (len=115) "interactsh server url for self-hosted instance (default: oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me)",
    short: (string) (len=7) "iserver",
    long: (string) (len=17) "interactsh-server",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=9) "trace-log": (*goflags.FlagData)(0xc00054bce0)({
    usage: (string) (len=37) "file to write sent requests trace log",
    short: (string) (len=4) "tlog",
    long: (string) (len=9) "trace-log",
    group: (string) (len=5) "debug",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "hang-monitor": (*goflags.FlagData)(0xc00054be30)({
    usage: (string) (len=29) "enable nuclei hang monitoring",
    short: (string) (len=2) "hm",
    long: (string) (len=12) "hang-monitor",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "mr": (*goflags.FlagData)(0xc00054a460)({
    usage: (string) (len=52) "max number of redirects to follow for http templates",
    short: (string) (len=2) "mr",
    long: (string) (len=13) "max-redirects",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=2) "10",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "H": (*goflags.FlagData)(0xc00054a5b0)({
    usage: (string) (len=86) "custom header/cookie to include in all http request in header:value format (cli, file)",
    short: (string) (len=1) "H",
    long: (string) (len=6) "header",
    group: (string) (len=7) "configs",
    defaultValue: (goflags.FileStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=16) "system-resolvers": (*goflags.FlagData)(0xc00054a700)({
    usage: (string) (len=42) "use system DNS resolving as error fallback",
    short: (string) (len=2) "sr",
    long: (string) (len=16) "system-resolvers",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=26) "interactions-poll-duration": (*goflags.FlagData)(0xc00054ad20)({
    usage: (string) (len=62) "number of seconds to wait before each interaction poll request",
    short: (string) "",
    long: (string) (len=26) "interactions-poll-duration",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) (len=1) "5",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "v": (*goflags.FlagData)(0xc00054bf10)({
    usage: (string) (len=19) "show verbose output",
    short: (string) (len=1) "v",
    long: (string) (len=7) "verbose",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "si": (*goflags.FlagData)(0xc00059c770)({
    usage: (string) (len=61) "number of seconds to wait between showing a statistics update",
    short: (string) (len=2) "si",
    long: (string) (len=14) "stats-interval",
    group: (string) (len=5) "stats",
    defaultValue: (string) (len=1) "5",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=7) "metrics": (*goflags.FlagData)(0xc00059c7e0)({
    usage: (string) (len=31) "expose nuclei metrics on a port",
    short: (string) (len=1) "m",
    long: (string) (len=7) "metrics",
    group: (string) (len=5) "stats",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "ept": (*goflags.FlagData)(0xc000465ab0)({
    usage: (string) (len=129) "templates to exclude based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois",
    short: (string) (len=3) "ept",
    long: (string) (len=12) "exclude-type",
    group: (string) (len=7) "filters",
    defaultValue: (*types.ProtocolTypes)(0x2e15c60)(),
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=13) "no-interactsh": (*goflags.FlagData)(0xc00054ae00)({
    usage: (string) (len=72) "disable interactsh server for OAST testing, exclude OAST based templates",
    short: (string) (len=2) "ni",
    long: (string) (len=13) "no-interactsh",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=17) "rate-limit-minute": (*goflags.FlagData)(0xc00054aee0)({
    usage: (string) (len=45) "maximum number of requests to send per minute",
    short: (string) (len=3) "rlm",
    long: (string) (len=17) "rate-limit-minute",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=1) "0",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "tu": (*goflags.FlagData)(0xc000464ee0)({
    usage: (string) (len=52) "list of template urls to run (comma-separated, file)",
    short: (string) (len=2) "tu",
    long: (string) (len=12) "template-url",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=5) "etags": (*goflags.FlagData)(0xc000465570)({
    usage: (string) (len=58) "templates to exclude based on tags (comma-separated, file)",
    short: (string) (len=5) "etags",
    long: (string) (len=12) "exclude-tags",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "se": (*goflags.FlagData)(0xc00054a1c0)({
    usage: (string) (len=38) "file to export results in SARIF format",
    short: (string) (len=2) "se",
    long: (string) (len=12) "sarif-export",
    group: (string) (len=6) "output",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=8) "no-stdin": (*goflags.FlagData)(0xc00054b6c0)({
    usage: (string) (len=24) "Disable Stdin processing",
    short: (string) "",
    long: (string) (len=8) "no-stdin",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "hc": (*goflags.FlagData)(0xc00059c150)({
    usage: (string) (len=23) "run diagnostic check up",
    short: (string) (len=2) "hc",
    long: (string) (len=12) "health-check",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "header": (*goflags.FlagData)(0xc00054a5b0)({
    usage: (string) (len=86) "custom header/cookie to include in all http request in header:value format (cli, file)",
    short: (string) (len=1) "H",
    long: (string) (len=6) "header",
    group: (string) (len=7) "configs",
    defaultValue: (goflags.FileStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "rl": (*goflags.FlagData)(0xc00054ae70)({
    usage: (string) (len=45) "maximum number of requests to send per second",
    short: (string) (len=2) "rl",
    long: (string) (len=10) "rate-limit",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=3) "150",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=7) "version": (*goflags.FlagData)(0xc00054bdc0)({
    usage: (string) (len=19) "show nuclei version",
    short: (string) "",
    long: (string) (len=7) "version",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "hm": (*goflags.FlagData)(0xc00054be30)({
    usage: (string) (len=29) "enable nuclei hang monitoring",
    short: (string) (len=2) "hm",
    long: (string) (len=12) "hang-monitor",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "update": (*goflags.FlagData)(0xc00059c1c0)({
    usage: (string) (len=51) "update nuclei engine to the latest released version",
    short: (string) "",
    long: (string) (len=6) "update",
    group: (string) (len=6) "update",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "ut": (*goflags.FlagData)(0xc00059c2a0)({
    usage: (string) (len=50) "update nuclei-templates to latest released version",
    short: (string) (len=2) "ut",
    long: (string) (len=16) "update-templates",
    group: (string) (len=6) "update",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=16) "update-directory": (*goflags.FlagData)(0xc00059c3f0)({
    usage: (string) (len=59) "overwrite the default directory to install nuclei-templates",
    short: (string) (len=2) "ud",
    long: (string) (len=16) "update-directory",
    group: (string) (len=6) "update",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "nt": (*goflags.FlagData)(0xc000464930)({
    usage: (string) (len=63) "run only new templates added in latest nuclei-templates release",
    short: (string) (len=2) "nt",
    long: (string) (len=13) "new-templates",
    group: (string) (len=9) "templates",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=4) "tags": (*goflags.FlagData)(0xc0004653b0)({
    usage: (string) (len=54) "templates to run based on tags (comma-separated, file)",
    short: (string) "",
    long: (string) (len=4) "tags",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=10) "include-rr": (*goflags.FlagData)(0xc000465ea0)({
    usage: (string) (len=70) "include request/response pairs in the JSONL output (for findings only)",
    short: (string) (len=3) "irr",
    long: (string) (len=10) "include-rr",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=14) "matcher-status": (*goflags.FlagData)(0xc00054a0e0)({
    usage: (string) (len=28) "display match failure status",
    short: (string) (len=2) "ms",
    long: (string) (len=14) "matcher-status",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "r": (*goflags.FlagData)(0xc00054a690)({
    usage: (string) (len=40) "file containing resolver list for nuclei",
    short: (string) (len=1) "r",
    long: (string) (len=9) "resolvers",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=20) "headless-concurrency": (*goflags.FlagData)(0xc00054b1f0)({
    usage: (string) (len=63) "maximum number of headless templates to be executed in parallel",
    short: (string) (len=5) "headc",
    long: (string) (len=20) "headless-concurrency",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=2) "10",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "ldp": (*goflags.FlagData)(0xc00054b3b0)({
    usage: (string) (len=52) "leave default HTTP/HTTPS ports (eg. host:80,host:443",
    short: (string) (len=3) "ldp",
    long: (string) (len=19) "leave-default-ports",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=9) "templates": (*goflags.FlagData)(0xc000464e70)({
    usage: (string) (len=69) "list of template or template directory to run (comma-separated, file)",
    short: (string) (len=1) "t",
    long: (string) (len=9) "templates",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=8) "no-color": (*goflags.FlagData)(0xc000465ce0)({
    usage: (string) (len=51) "disable output content coloring (ANSI escape codes)",
    short: (string) (len=2) "nc",
    long: (string) (len=8) "no-color",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "target": (*goflags.FlagData)(0xc0004647e0)({
    usage: (string) (len=25) "target URLs/hosts to scan",
    short: (string) (len=1) "u",
    long: (string) (len=6) "target",
    group: (string) (len=5) "input",
    defaultValue: (goflags.StringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "no-timestamp": (*goflags.FlagData)(0xc00054a000)({
    usage: (string) (len=40) "disable printing timestamp in cli output",
    short: (string) (len=3) "nts",
    long: (string) (len=12) "no-timestamp",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "me": (*goflags.FlagData)(0xc00054a150)({
    usage: (string) (len=46) "directory to export results in markdown format",
    short: (string) (len=2) "me",
    long: (string) (len=15) "markdown-export",
    group: (string) (len=6) "output",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "sarif-export": (*goflags.FlagData)(0xc00054a1c0)({
    usage: (string) (len=38) "file to export results in SARIF format",
    short: (string) (len=2) "se",
    long: (string) (len=12) "sarif-export",
    group: (string) (len=6) "output",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "ev": (*goflags.FlagData)(0xc00054a7e0)({
    usage: (string) (len=51) "enable environment variables to be used in template",
    short: (string) (len=2) "ev",
    long: (string) (len=8) "env-vars",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=9) "debug-req": (*goflags.FlagData)(0xc00054bab0)({
    usage: (string) (len=22) "show all sent requests",
    short: (string) (len=4) "dreq",
    long: (string) (len=9) "debug-req",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "pi": (*goflags.FlagData)(0xc00054bc70)({
    usage: (string) (len=27) "proxy all internal requests",
    short: (string) (len=2) "pi",
    long: (string) (len=14) "proxy-internal",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=19) "leave-default-ports": (*goflags.FlagData)(0xc00054b3b0)({
    usage: (string) (len=52) "leave default HTTP/HTTPS ports (eg. host:80,host:443",
    short: (string) (len=3) "ldp",
    long: (string) (len=19) "leave-default-ports",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "workflow-url": (*goflags.FlagData)(0xc0004650a0)({
    usage: (string) (len=52) "list of workflow urls to run (comma-separated, file)",
    short: (string) (len=2) "wu",
    long: (string) (len=12) "workflow-url",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "include-tags": (*goflags.FlagData)(0xc0004655e0)({
    usage: (string) (len=80) "tags to be executed even if they are excluded either by default or configuration",
    short: (string) (len=5) "itags",
    long: (string) (len=12) "include-tags",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=11) "template-id": (*goflags.FlagData)(0xc000465650)({
    usage: (string) (len=62) "templates to run based on template ids (comma-separated, file)",
    short: (string) (len=2) "id",
    long: (string) (len=11) "template-id",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=16) "follow-redirects": (*goflags.FlagData)(0xc00054a3f0)({
    usage: (string) (len=45) "enable following redirects for http templates",
    short: (string) (len=2) "fr",
    long: (string) (len=16) "follow-redirects",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=13) "max-redirects": (*goflags.FlagData)(0xc00054a460)({
    usage: (string) (len=52) "max number of redirects to follow for http templates",
    short: (string) (len=2) "mr",
    long: (string) (len=13) "max-redirects",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=2) "10",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "ni": (*goflags.FlagData)(0xc00054ae00)({
    usage: (string) (len=72) "disable interactsh server for OAST testing, exclude OAST based templates",
    short: (string) (len=2) "ni",
    long: (string) (len=13) "no-interactsh",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "c": (*goflags.FlagData)(0xc00054b0a0)({
    usage: (string) (len=54) "maximum number of templates to be executed in parallel",
    short: (string) (len=1) "c",
    long: (string) (len=11) "concurrency",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=2) "25",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "irt": (*goflags.FlagData)(0xc00054b650)({
    usage: (string) (len=21) "timeout on input read",
    short: (string) (len=3) "irt",
    long: (string) (len=18) "input-read-timeout",
    group: (string) (len=12) "optimization",
    defaultValue: (time.Duration) 3m0s,
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=16) "no-strict-syntax": (*goflags.FlagData)(0xc000465180)({
    usage: (string) (len=40) "Disable strict syntax check on templates",
    short: (string) (len=3) "nss",
    long: (string) (len=16) "no-strict-syntax",
    group: (string) (len=9) "templates",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=7) "passive": (*goflags.FlagData)(0xc00054a770)({
    usage: (string) (len=44) "enable passive HTTP response processing mode",
    short: (string) "",
    long: (string) (len=7) "passive",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=5) "headc": (*goflags.FlagData)(0xc00054b1f0)({
    usage: (string) (len=63) "maximum number of headless templates to be executed in parallel",
    short: (string) (len=5) "headc",
    long: (string) (len=20) "headless-concurrency",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=2) "10",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=18) "stop-at-first-path": (*goflags.FlagData)(0xc00054b570)({
    usage: (string) (len=87) "stop processing HTTP requests after the first match (may break template/workflow logic)",
    short: (string) (len=3) "spm",
    long: (string) (len=18) "stop-at-first-path",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=4) "tlog": (*goflags.FlagData)(0xc00054bce0)({
    usage: (string) (len=37) "file to write sent requests trace log",
    short: (string) (len=4) "tlog",
    long: (string) (len=9) "trace-log",
    group: (string) (len=5) "debug",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "health-check": (*goflags.FlagData)(0xc00059c150)({
    usage: (string) (len=23) "run diagnostic check up",
    short: (string) (len=2) "hc",
    long: (string) (len=12) "health-check",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "w": (*goflags.FlagData)(0xc000465030)({
    usage: (string) (len=69) "list of workflow or workflow directory to run (comma-separated, file)",
    short: (string) (len=1) "w",
    long: (string) (len=9) "workflows",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=8) "validate": (*goflags.FlagData)(0xc000465110)({
    usage: (string) (len=39) "validate the passed templates to nuclei",
    short: (string) "",
    long: (string) (len=8) "validate",
    group: (string) (len=9) "templates",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "nss": (*goflags.FlagData)(0xc000465180)({
    usage: (string) (len=40) "Disable strict syntax check on templates",
    short: (string) (len=3) "nss",
    long: (string) (len=16) "no-strict-syntax",
    group: (string) (len=9) "templates",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=22) "remote-template-domain": (*goflags.FlagData)(0xc0004652d0)({
    usage: (string) (len=49) "allowed domain list to load remote templates from",
    short: (string) "",
    long: (string) (len=22) "remote-template-domain",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.StringSlice) (len=1 cap=1) ["api.nuclei.sh"],
    skipMarshal: (bool) false,
    field: (*goflags.StringSlice)(0x2e15b90)((len=1 cap=1) ["api.nuclei.sh"])
   }),
   (string) (len=16) "exclude-severity": (*goflags.FlagData)(0xc0004659d0)({
    usage: (string) (len=99) "templates to exclude based on severity. Possible values: info, low, medium, high, critical, unknown",
    short: (string) (len=2) "es",
    long: (string) (len=16) "exclude-severity",
    group: (string) (len=7) "filters",
    defaultValue: (*severity.Severities)(0x2e15c18)(),
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "rc": (*goflags.FlagData)(0xc00054a540)({
    usage: (string) (len=42) "nuclei reporting module configuration file",
    short: (string) (len=2) "rc",
    long: (string) (len=13) "report-config",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "vv": (*goflags.FlagData)(0xc00054bf80)({
    usage: (string) (len=33) "display templates loaded for scan",
    short: (string) "",
    long: (string) (len=2) "vv",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=14) "stats-interval": (*goflags.FlagData)(0xc00059c770)({
    usage: (string) (len=61) "number of seconds to wait between showing a statistics update",
    short: (string) (len=2) "si",
    long: (string) (len=14) "stats-interval",
    group: (string) (len=5) "stats",
    defaultValue: (string) (len=1) "5",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "fr": (*goflags.FlagData)(0xc00054a3f0)({
    usage: (string) (len=45) "enable following redirects for http templates",
    short: (string) (len=2) "fr",
    long: (string) (len=16) "follow-redirects",
    group: (string) (len=7) "configs",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=23) "interactions-cache-size": (*goflags.FlagData)(0xc00054ac40)({
    usage: (string) (len=52) "number of requests to keep in the interactions cache",
    short: (string) "",
    long: (string) (len=23) "interactions-cache-size",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) (len=4) "5000",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=8) "headless": (*goflags.FlagData)(0xc00054b810)({
    usage: (string) (len=96) "enable templates that require headless browser support (root user on linux will disable sandbox)",
    short: (string) "",
    long: (string) (len=8) "headless",
    group: (string) (len=8) "headless",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=14) "proxy-internal": (*goflags.FlagData)(0xc00054bc70)({
    usage: (string) (len=27) "proxy all internal requests",
    short: (string) (len=2) "pi",
    long: (string) (len=14) "proxy-internal",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=9) "error-log": (*goflags.FlagData)(0xc00054bd50)({
    usage: (string) (len=37) "file to write sent requests error log",
    short: (string) (len=4) "elog",
    long: (string) (len=9) "error-log",
    group: (string) (len=5) "debug",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "ep": (*goflags.FlagData)(0xc00059c000)({
    usage: (string) (len=29) "enable pprof debugging server",
    short: (string) (len=2) "ep",
    long: (string) (len=12) "enable-pprof",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=18) "input-read-timeout": (*goflags.FlagData)(0xc00054b650)({
    usage: (string) (len=21) "timeout on input read",
    short: (string) (len=3) "irt",
    long: (string) (len=18) "input-read-timeout",
    group: (string) (len=12) "optimization",
    defaultValue: (time.Duration) 3m0s,
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=12) "template-url": (*goflags.FlagData)(0xc000464ee0)({
    usage: (string) (len=52) "list of template urls to run (comma-separated, file)",
    short: (string) (len=2) "tu",
    long: (string) (len=12) "template-url",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=5) "sresp": (*goflags.FlagData)(0xc000465b90)({
    usage: (string) (len=68) "store all request/response passed through nuclei to output directory",
    short: (string) (len=5) "sresp",
    long: (string) (len=10) "store-resp",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=1) "V": (*goflags.FlagData)(0xc00054a620)({
    usage: (string) (len=31) "custom vars in key=value format",
    short: (string) (len=1) "V",
    long: (string) (len=3) "var",
    group: (string) (len=7) "configs",
    defaultValue: ([]string) {
    },
    skipMarshal: (bool) true,
    field: (flag.Value) <nil>
   }),
   (string) (len=11) "client-cert": (*goflags.FlagData)(0xc00054a850)({
    usage: (string) (len=83) "client certificate file (PEM-encoded) used for authenticating against scanned hosts",
    short: (string) (len=2) "cc",
    long: (string) (len=11) "client-cert",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "itoken": (*goflags.FlagData)(0xc00054abd0)({
    usage: (string) (len=54) "authentication token for self-hosted interactsh server",
    short: (string) (len=6) "itoken",
    long: (string) (len=16) "interactsh-token",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=11) "concurrency": (*goflags.FlagData)(0xc00054b0a0)({
    usage: (string) (len=54) "maximum number of templates to be executed in parallel",
    short: (string) (len=1) "c",
    long: (string) (len=11) "concurrency",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=2) "25",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=7) "timeout": (*goflags.FlagData)(0xc00054b260)({
    usage: (string) (len=38) "time to wait in seconds before timeout",
    short: (string) "",
    long: (string) (len=7) "timeout",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=1) "5",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=5) "debug": (*goflags.FlagData)(0xc00054b9d0)({
    usage: (string) (len=31) "show all requests and responses",
    short: (string) "",
    long: (string) (len=5) "debug",
    group: (string) (len=5) "debug",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=7) "no-meta": (*goflags.FlagData)(0xc000465f80)({
    usage: (string) (len=46) "disable printing result metadata in cli output",
    short: (string) (len=2) "nm",
    long: (string) (len=7) "no-meta",
    group: (string) (len=6) "output",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=6) "config": (*goflags.FlagData)(0xc00054a380)({
    usage: (string) (len=37) "path to the nuclei configuration file",
    short: (string) "",
    long: (string) (len=6) "config",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=2) "ca": (*goflags.FlagData)(0xc00054a930)({
    usage: (string) (len=93) "client certificate authority file (PEM-encoded) used for authenticating against scanned hosts",
    short: (string) (len=2) "ca",
    long: (string) (len=9) "client-ca",
    group: (string) (len=7) "configs",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=16) "interactsh-token": (*goflags.FlagData)(0xc00054abd0)({
    usage: (string) (len=54) "authentication token for self-hosted interactsh server",
    short: (string) (len=6) "itoken",
    long: (string) (len=16) "interactsh-token",
    group: (string) (len=10) "interactsh",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=4) "elog": (*goflags.FlagData)(0xc00054bd50)({
    usage: (string) (len=37) "file to write sent requests error log",
    short: (string) (len=4) "elog",
    long: (string) (len=9) "error-log",
    group: (string) (len=5) "debug",
    defaultValue: (string) "",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=16) "update-templates": (*goflags.FlagData)(0xc00059c2a0)({
    usage: (string) (len=50) "update nuclei-templates to latest released version",
    short: (string) (len=2) "ut",
    long: (string) (len=16) "update-templates",
    group: (string) (len=6) "update",
    defaultValue: (string) (len=5) "false",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=17) "include-templates": (*goflags.FlagData)(0xc000465730)({
    usage: (string) (len=85) "templates to be executed even if they are excluded either by default or configuration",
    short: (string) (len=2) "it",
    long: (string) (len=17) "include-templates",
    group: (string) (len=7) "filters",
    defaultValue: (goflags.FileNormalizedStringSlice) [],
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "var": (*goflags.FlagData)(0xc00054a620)({
    usage: (string) (len=31) "custom vars in key=value format",
    short: (string) (len=1) "V",
    long: (string) (len=3) "var",
    group: (string) (len=7) "configs",
    defaultValue: ([]string) {
    },
    skipMarshal: (bool) true,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "hbs": (*goflags.FlagData)(0xc00054b180)({
    usage: (string) (len=72) "maximum number of headless hosts to be analyzed in parallel per template",
    short: (string) (len=3) "hbs",
    long: (string) (len=18) "headless-bulk-size",
    group: (string) (len=10) "rate-limit",
    defaultValue: (string) (len=2) "10",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   }),
   (string) (len=3) "mhe": (*goflags.FlagData)(0xc00054b420)({
    usage: (string) (len=47) "max errors for a host before skipping from scan",
    short: (string) (len=3) "mhe",
    long: (string) (len=14) "max-host-error",
    group: (string) (len=12) "optimization",
    defaultValue: (string) (len=2) "30",
    skipMarshal: (bool) false,
    field: (flag.Value) <nil>
   })
  },
  keys: ([]string) (len=186 cap=256) {
   (string) (len=1) "u",
   (string) (len=6) "target",
   (string) (len=1) "l",
   (string) (len=4) "list",
   (string) (len=6) "resume",
   (string) (len=2) "nt",
   (string) (len=13) "new-templates",
   (string) (len=3) "ntv",
   (string) (len=21) "new-templates-version",
   (string) (len=2) "as",
   (string) (len=14) "automatic-scan",
   (string) (len=1) "t",
   (string) (len=9) "templates",
   (string) (len=2) "tu",
   (string) (len=12) "template-url",
   (string) (len=1) "w",
   (string) (len=9) "workflows",
   (string) (len=2) "wu",
   (string) (len=12) "workflow-url",
   (string) (len=8) "validate",
   (string) (len=3) "nss",
   (string) (len=16) "no-strict-syntax",
   (string) (len=2) "tl",
   (string) (len=22) "remote-template-domain",
   (string) (len=1) "a",
   (string) (len=6) "author",
   (string) (len=4) "tags",
   (string) (len=5) "etags",
   (string) (len=12) "exclude-tags",
   (string) (len=5) "itags",
   (string) (len=12) "include-tags",
   (string) (len=2) "id",
   (string) (len=11) "template-id",
   (string) (len=3) "eid",
   (string) (len=10) "exclude-id",
   (string) (len=2) "it",
   (string) (len=17) "include-templates",
   (string) (len=2) "et",
   (string) (len=17) "exclude-templates",
   (string) (len=2) "em",
   (string) (len=16) "exclude-matchers",
   (string) (len=1) "s",
   (string) (len=8) "severity",
   (string) (len=2) "es",
   (string) (len=16) "exclude-severity",
   (string) (len=2) "pt",
   (string) (len=4) "type",
   (string) (len=3) "ept",
   (string) (len=12) "exclude-type",
   (string) (len=1) "o",
   (string) (len=6) "output",
   (string) (len=5) "sresp",
   (string) (len=10) "store-resp",
   (string) (len=3) "srd",
   (string) (len=14) "store-resp-dir",
   (string) (len=6) "silent",
   (string) (len=2) "nc",
   (string) (len=8) "no-color",
   (string) (len=4) "json",
   (string) (len=3) "irr",
   (string) (len=10) "include-rr",
   (string) (len=2) "nm",
   (string) (len=7) "no-meta",
   (string) (len=3) "nts",
   (string) (len=12) "no-timestamp",
   (string) (len=3) "rdb",
   (string) (len=9) "report-db",
   (string) (len=2) "ms",
   (string) (len=14) "matcher-status",
   (string) (len=2) "me",
   (string) (len=15) "markdown-export",
   (string) (len=2) "se",
   (string) (len=12) "sarif-export",
   (string) (len=6) "config",
   (string) (len=2) "fr",
   (string) (len=16) "follow-redirects",
   (string) (len=2) "mr",
   (string) (len=13) "max-redirects",
   (string) (len=2) "dr",
   (string) (len=17) "disable-redirects",
   (string) (len=2) "rc",
   (string) (len=13) "report-config",
   (string) (len=1) "H",
   (string) (len=6) "header",
   (string) (len=1) "V",
   (string) (len=3) "var",
   (string) (len=1) "r",
   (string) (len=9) "resolvers",
   (string) (len=2) "sr",
   (string) (len=16) "system-resolvers",
   (string) (len=7) "passive",
   (string) (len=2) "ev",
   (string) (len=8) "env-vars",
   (string) (len=2) "cc",
   (string) (len=11) "client-cert",
   (string) (len=2) "ck",
   (string) (len=10) "client-key",
   (string) (len=2) "ca",
   (string) (len=9) "client-ca",
   (string) (len=3) "sml",
   (string) (len=15) "show-match-line",
   (string) (len=4) "ztls",
   (string) (len=3) "sni",
   (string) (len=7) "iserver",
   (string) (len=17) "interactsh-server",
   (string) (len=6) "itoken",
   (string) (len=16) "interactsh-token",
   (string) (len=23) "interactions-cache-size",
   (string) (len=21) "interactions-eviction",
   (string) (len=26) "interactions-poll-duration",
   (string) (len=28) "interactions-cooldown-period",
   (string) (len=2) "ni",
   (string) (len=13) "no-interactsh",
   (string) (len=2) "rl",
   (string) (len=10) "rate-limit",
   (string) (len=3) "rlm",
   (string) (len=17) "rate-limit-minute",
   (string) (len=2) "bs",
   (string) (len=9) "bulk-size",
   (string) (len=1) "c",
   (string) (len=11) "concurrency",
   (string) (len=3) "hbs",
   (string) (len=18) "headless-bulk-size",
   (string) (len=5) "headc",
   (string) (len=20) "headless-concurrency",
   (string) (len=7) "timeout",
   (string) (len=7) "retries",
   (string) (len=3) "ldp",
   (string) (len=19) "leave-default-ports",
   (string) (len=3) "mhe",
   (string) (len=14) "max-host-error",
   (string) (len=7) "project",
   (string) (len=12) "project-path",
   (string) (len=3) "spm",
   (string) (len=18) "stop-at-first-path",
   (string) (len=6) "stream",
   (string) (len=3) "irt",
   (string) (len=18) "input-read-timeout",
   (string) (len=8) "no-stdin",
   (string) (len=8) "headless",
   (string) (len=12) "page-timeout",
   (string) (len=2) "sb",
   (string) (len=12) "show-browser",
   (string) (len=2) "sc",
   (string) (len=13) "system-chrome",
   (string) (len=5) "debug",
   (string) (len=4) "dreq",
   (string) (len=9) "debug-req",
   (string) (len=5) "dresp",
   (string) (len=10) "debug-resp",
   (string) (len=1) "p",
   (string) (len=5) "proxy",
   (string) (len=2) "pi",
   (string) (len=14) "proxy-internal",
   (string) (len=4) "tlog",
   (string) (len=9) "trace-log",
   (string) (len=4) "elog",
   (string) (len=9) "error-log",
   (string) (len=7) "version",
   (string) (len=2) "hm",
   (string) (len=12) "hang-monitor",
   (string) (len=1) "v",
   (string) (len=7) "verbose",
   (string) (len=2) "vv",
   (string) (len=2) "ep",
   (string) (len=12) "enable-pprof",
   (string) (len=2) "tv",
   (string) (len=17) "templates-version",
   (string) (len=2) "hc",
   (string) (len=12) "health-check",
   (string) (len=6) "update",
   (string) (len=2) "ut",
   (string) (len=16) "update-templates",
   (string) (len=2) "ud",
   (string) (len=16) "update-directory",
   (string) (len=3) "duc",
   (string) (len=20) "disable-update-check",
   (string) (len=5) "stats",
   (string) (len=2) "sj",
   (string) (len=10) "stats-json",
   (string) (len=2) "si",
   (string) (len=14) "stats-interval",
   (string) (len=1) "m",
   (string) (len=7) "metrics",
   (string) (len=2) "mp",
   (string) (len=12) "metrics-port"
  }
 },
 groups: ([]goflags.groupData) (len=12 cap=16) {
  (goflags.groupData) {
   name: (string) (len=5) "input",
   description: (string) (len=6) "Target"
  },
  (goflags.groupData) {
   name: (string) (len=9) "templates",
   description: (string) (len=9) "Templates"
  },
  (goflags.groupData) {
   name: (string) (len=7) "filters",
   description: (string) (len=9) "Filtering"
  },
  (goflags.groupData) {
   name: (string) (len=6) "output",
   description: (string) (len=6) "Output"
  },
  (goflags.groupData) {
   name: (string) (len=7) "configs",
   description: (string) (len=14) "Configurations"
  },
  (goflags.groupData) {
   name: (string) (len=10) "interactsh",
   description: (string) (len=10) "interactsh"
  },
  (goflags.groupData) {
   name: (string) (len=10) "rate-limit",
   description: (string) (len=10) "Rate-Limit"
  },
  (goflags.groupData) {
   name: (string) (len=12) "optimization",
   description: (string) (len=13) "Optimizations"
  },
  (goflags.groupData) {
   name: (string) (len=8) "headless",
   description: (string) (len=8) "Headless"
  },
  (goflags.groupData) {
   name: (string) (len=5) "debug",
   description: (string) (len=5) "Debug"
  },
  (goflags.groupData) {
   name: (string) (len=6) "update",
   description: (string) (len=6) "Update"
  },
  (goflags.groupData) {
   name: (string) (len=5) "stats",
   description: (string) (len=10) "Statistics"
  }
 },
 CommandLine: (*flag.FlagSet)(0xc0005501e0)({
  Usage: (func()) 0x1228c00,
  name: (string) (len=72) "C:\\Users\\welcome\\AppData\\Local\\Temp\\go-build1411856677\\b001\\exe\\main.exe",
  parsed: (bool) true,
  actual: (map[string]*flag.Flag) <nil>,
  formal: (map[string]*flag.Flag) (len=185) {
   (string) (len=2) "wu": (*flag.Flag)(0xc0005338c0)({
    Name: (string) (len=2) "wu",
    Usage: (string) (len=52) "list of workflow urls to run (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15b48)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=6) "author": (*flag.Flag)(0xc000533b80)({
    Name: (string) (len=6) "author",
    Usage: (string) (len=57) "templates to run based on authors (comma-separated, file)",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15c30)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=3) "ept": (*flag.Flag)(0xc00009eac0)({
    Name: (string) (len=3) "ept",
    Usage: (string) (len=129) "templates to exclude based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois",
    Value: (*types.ProtocolTypes)(0x2e15c60)(),
    DefValue: (string) ""
   }),
   (string) (len=3) "sml": (*flag.Flag)(0xc00009f940)({
    Name: (string) (len=3) "sml",
    Usage: (string) (len=63) "show match lines for file templates, works with extractors only",
    Value: (*flag.boolValue)(0x2e15f09)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=10) "debug-resp": (*flag.Flag)(0xc000366140)({
    Name: (string) (len=10) "debug-resp",
    Usage: (string) (len=27) "show all received responses",
    Value: (*flag.boolValue)(0x2e15e9a)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=10) "stats-json": (*flag.Flag)(0xc0003668c0)({
    Name: (string) (len=10) "stats-json",
    Usage: (string) (len=61) "write statistics data to an output file in JSONL(ines) format",
    Value: (*flag.boolValue)(0x2e15e92)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=5) "itags": (*flag.Flag)(0xc000533cc0)({
    Name: (string) (len=5) "itags",
    Usage: (string) (len=80) "tags to be executed even if they are excluded either by default or configuration",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15c78)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=11) "template-id": (*flag.Flag)(0xc000533dc0)({
    Name: (string) (len=11) "template-id",
    Usage: (string) (len=62) "templates to run based on template ids (comma-separated, file)",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15ca8)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=10) "store-resp": (*flag.Flag)(0xc00009ec80)({
    Name: (string) (len=10) "store-resp",
    Usage: (string) (len=68) "store all request/response passed through nuclei to output directory",
    Value: (*flag.boolValue)(0x2e15f0b)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "mr": (*flag.Flag)(0xc00009f380)({
    Name: (string) (len=2) "mr",
    Usage: (string) (len=52) "max number of redirects to follow for http templates",
    Value: (*flag.intValue)(0x2e15e88)(10),
    DefValue: (string) (len=2) "10"
   }),
   (string) (len=1) "H": (*flag.Flag)(0xc00009f500)({
    Name: (string) (len=1) "H",
    Usage: (string) (len=86) "custom header/cookie to include in all http request in header:value format (cli, file)",
    Value: (*goflags.FileStringSlice)(0x2e15bd8)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=9) "trace-log": (*flag.Flag)(0xc0003662c0)({
    Name: (string) (len=9) "trace-log",
    Usage: (string) (len=37) "file to write sent requests trace log",
    Value: (*flag.stringValue)(0x2e15d98)(),
    DefValue: (string) ""
   }),
   (string) (len=17) "include-templates": (*flag.Flag)(0xc000533ec0)({
    Name: (string) (len=17) "include-templates",
    Usage: (string) (len=85) "templates to be executed even if they are excluded either by default or configuration",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15c90)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=2) "es": (*flag.Flag)(0xc00009e940)({
    Name: (string) (len=2) "es",
    Usage: (string) (len=99) "templates to exclude based on severity. Possible values: info, low, medium, high, critical, unknown",
    Value: (*severity.Severities)(0x2e15c18)(),
    DefValue: (string) ""
   }),
   (string) (len=13) "max-redirects": (*flag.Flag)(0xc00009f3c0)({
    Name: (string) (len=13) "max-redirects",
    Usage: (string) (len=52) "max number of redirects to follow for http templates",
    Value: (*flag.intValue)(0x2e15e88)(10),
    DefValue: (string) (len=2) "10"
   }),
   (string) (len=2) "rl": (*flag.Flag)(0xc00009fcc0)({
    Name: (string) (len=2) "rl",
    Usage: (string) (len=45) "maximum number of requests to send per second",
    Value: (*flag.intValue)(0x2e15e50)(150),
    DefValue: (string) (len=3) "150"
   }),
   (string) (len=17) "rate-limit-minute": (*flag.Flag)(0xc00009fd80)({
    Name: (string) (len=17) "rate-limit-minute",
    Usage: (string) (len=45) "maximum number of requests to send per minute",
    Value: (*flag.intValue)(0x2e15e58)(0),
    DefValue: (string) (len=1) "0"
   }),
   (string) (len=13) "system-chrome": (*flag.Flag)(0xc000366000)({
    Name: (string) (len=13) "system-chrome",
    Usage: (string) (len=62) "Use local installed chrome browser instead of nuclei installed",
    Value: (*flag.boolValue)(0x2e15e95)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=6) "resume": (*flag.Flag)(0xc0002a1fc0)({
    Name: (string) (len=6) "resume",
    Usage: (string) (len=58) "Resume scan using resume.cfg (clustering will be disabled)",
    Value: (*flag.stringValue)(0x2e15d48)(),
    DefValue: (string) ""
   }),
   (string) (len=12) "include-tags": (*flag.Flag)(0xc000533d00)({
    Name: (string) (len=12) "include-tags",
    Usage: (string) (len=80) "tags to be executed even if they are excluded either by default or configuration",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15c78)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=5) "sresp": (*flag.Flag)(0xc00009ec40)({
    Name: (string) (len=5) "sresp",
    Usage: (string) (len=68) "store all request/response passed through nuclei to output directory",
    Value: (*flag.boolValue)(0x2e15f0b)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=23) "interactions-cache-size": (*flag.Flag)(0xc00009fb40)({
    Name: (string) (len=23) "interactions-cache-size",
    Usage: (string) (len=52) "number of requests to keep in the interactions cache",
    Value: (*flag.intValue)(0x2e15e68)(5000),
    DefValue: (string) (len=4) "5000"
   }),
   (string) (len=1) "c": (*flag.Flag)(0xc00009fe40)({
    Name: (string) (len=1) "c",
    Usage: (string) (len=54) "maximum number of templates to be executed in parallel",
    Value: (*flag.intValue)(0x2e15e28)(25),
    DefValue: (string) (len=2) "25"
   }),
   (string) (len=12) "page-timeout": (*flag.Flag)(0xc00007ca00)({
    Name: (string) (len=12) "page-timeout",
    Usage: (string) (len=46) "seconds to wait for each page in headless mode",
    Value: (*flag.intValue)(0x2e15e60)(20),
    DefValue: (string) (len=2) "20"
   }),
   (string) (len=12) "workflow-url": (*flag.Flag)(0xc000533900)({
    Name: (string) (len=12) "workflow-url",
    Usage: (string) (len=52) "list of workflow urls to run (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15b48)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=3) "nts": (*flag.Flag)(0xc00009f000)({
    Name: (string) (len=3) "nts",
    Usage: (string) (len=40) "disable printing timestamp in cli output",
    Value: (*flag.boolValue)(0x2e15eaf)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=18) "stop-at-first-path": (*flag.Flag)(0xc00007c880)({
    Name: (string) (len=18) "stop-at-first-path",
    Usage: (string) (len=87) "stop processing HTTP requests after the first match (may break template/workflow logic)",
    Value: (*flag.boolValue)(0x2e15eac)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=28) "interactions-cooldown-period": (*flag.Flag)(0xc00009fc00)({
    Name: (string) (len=28) "interactions-cooldown-period",
    Usage: (string) (len=49) "extra time for interaction polling before exiting",
    Value: (*flag.intValue)(0x2e15e80)(5),
    DefValue: (string) (len=1) "5"
   }),
   (string) (len=3) "spm": (*flag.Flag)(0xc00007c840)({
    Name: (string) (len=3) "spm",
    Usage: (string) (len=87) "stop processing HTTP requests after the first match (may break template/workflow logic)",
    Value: (*flag.boolValue)(0x2e15eac)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "nt": (*flag.Flag)(0xc000532400)({
    Name: (string) (len=2) "nt",
    Usage: (string) (len=63) "run only new templates added in latest nuclei-templates release",
    Value: (*flag.boolValue)(0x2e15eb1)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=3) "ntv": (*flag.Flag)(0xc0005334c0)({
    Name: (string) (len=3) "ntv",
    Usage: (string) (len=43) "run new templates added in specific version",
    Value: (*goflags.CommaSeparatedStringSlice)(0x2e15eb8)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=3) "nss": (*flag.Flag)(0xc000533a00)({
    Name: (string) (len=3) "nss",
    Usage: (string) (len=40) "Disable strict syntax check on templates",
    Value: (*flag.boolValue)(0x2e15ea0)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=9) "report-db": (*flag.Flag)(0xc00009f100)({
    Name: (string) (len=9) "report-db",
    Usage: (string) (len=66) "nuclei reporting database (always use this to persist report data)",
    Value: (*flag.stringValue)(0x2e15db8)(),
    DefValue: (string) ""
   }),
   (string) (len=2) "ms": (*flag.Flag)(0xc00009f140)({
    Name: (string) (len=2) "ms",
    Usage: (string) (len=28) "display match failure status",
    Value: (*flag.boolValue)(0x2e15ed4)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "sr": (*flag.Flag)(0xc00009f680)({
    Name: (string) (len=2) "sr",
    Usage: (string) (len=42) "use system DNS resolving as error fallback",
    Value: (*flag.boolValue)(0x2e15e96)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=5) "debug": (*flag.Flag)(0xc000366040)({
    Name: (string) (len=5) "debug",
    Usage: (string) (len=31) "show all requests and responses",
    Value: (*flag.boolValue)(0x2e15e98)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "tu": (*flag.Flag)(0xc0005337c0)({
    Name: (string) (len=2) "tu",
    Usage: (string) (len=52) "list of template urls to run (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15b78)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=4) "ztls": (*flag.Flag)(0xc00009f9c0)({
    Name: (string) (len=4) "ztls",
    Usage: (string) (len=60) "use ztls library with autofallback to standard one for tls13",
    Value: (*flag.boolValue)(0x2e15f08)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=7) "iserver": (*flag.Flag)(0xc00009fa40)({
    Name: (string) (len=7) "iserver",
    Usage: (string) (len=115) "interactsh server url for self-hosted instance (default: oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me)",
    Value: (*flag.stringValue)(0x2e15d00)(),
    DefValue: (string) ""
   }),
   (string) (len=16) "interactsh-token": (*flag.Flag)(0xc00009fb00)({
    Name: (string) (len=16) "interactsh-token",
    Usage: (string) (len=54) "authentication token for self-hosted interactsh server",
    Value: (*flag.stringValue)(0x2e15d10)(),
    DefValue: (string) ""
   }),
   (string) (len=2) "sj": (*flag.Flag)(0xc000366880)({
    Name: (string) (len=2) "sj",
    Usage: (string) (len=61) "write statistics data to an output file in JSONL(ines) format",
    Value: (*flag.boolValue)(0x2e15e92)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=1) "t": (*flag.Flag)(0xc000533740)({
    Name: (string) (len=1) "t",
    Usage: (string) (len=69) "list of template or template directory to run (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15b60)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=2) "id": (*flag.Flag)(0xc000533d40)({
    Name: (string) (len=2) "id",
    Usage: (string) (len=62) "templates to run based on template ids (comma-separated, file)",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15ca8)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=1) "s": (*flag.Flag)(0xc00009e040)({
    Name: (string) (len=1) "s",
    Usage: (string) (len=95) "templates to run based on severity. Possible values: info, low, medium, high, critical, unknown",
    Value: (*severity.Severities)(0x2e15c00)(),
    DefValue: (string) ""
   }),
   (string) (len=4) "type": (*flag.Flag)(0xc00009ea40)({
    Name: (string) (len=4) "type",
    Usage: (string) (len=125) "templates to run based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois",
    Value: (*types.ProtocolTypes)(0x2e15c48)(),
    DefValue: (string) ""
   }),
   (string) (len=17) "interactsh-server": (*flag.Flag)(0xc00009fa80)({
    Name: (string) (len=17) "interactsh-server",
    Usage: (string) (len=115) "interactsh server url for self-hosted instance (default: oast.pro,oast.live,oast.site,oast.online,oast.fun,oast.me)",
    Value: (*flag.stringValue)(0x2e15d00)(),
    DefValue: (string) ""
   }),
   (string) (len=17) "templates-version": (*flag.Flag)(0xc0003665c0)({
    Name: (string) (len=17) "templates-version",
    Usage: (string) (len=51) "shows the version of the installed nuclei-templates",
    Value: (*flag.boolValue)(0x2e15ea8)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=13) "no-interactsh": (*flag.Flag)(0xc00009fc80)({
    Name: (string) (len=13) "no-interactsh",
    Usage: (string) (len=72) "disable interactsh server for OAST testing, exclude OAST based templates",
    Value: (*flag.boolValue)(0x2e15ed0)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=20) "headless-concurrency": (*flag.Flag)(0xc00009ffc0)({
    Name: (string) (len=20) "headless-concurrency",
    Usage: (string) (len=63) "maximum number of headless templates to be executed in parallel",
    Value: (*flag.intValue)(0x2e15e38)(10),
    DefValue: (string) (len=2) "10"
   }),
   (string) (len=12) "hang-monitor": (*flag.Flag)(0xc000366400)({
    Name: (string) (len=12) "hang-monitor",
    Usage: (string) (len=29) "enable nuclei hang monitoring",
    Value: (*flag.boolValue)(0x2e15eaa)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "tv": (*flag.Flag)(0xc000366580)({
    Name: (string) (len=2) "tv",
    Usage: (string) (len=51) "shows the version of the installed nuclei-templates",
    Value: (*flag.boolValue)(0x2e15ea8)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=6) "target": (*flag.Flag)(0xc0002a1ec0)({
    Name: (string) (len=6) "target",
    Usage: (string) (len=25) "target URLs/hosts to scan",
    Value: (*goflags.StringSlice)(0x2e15d20)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=9) "templates": (*flag.Flag)(0xc000533780)({
    Name: (string) (len=9) "templates",
    Usage: (string) (len=69) "list of template or template directory to run (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15b60)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=16) "no-strict-syntax": (*flag.Flag)(0xc000533a40)({
    Name: (string) (len=16) "no-strict-syntax",
    Usage: (string) (len=40) "Disable strict syntax check on templates",
    Value: (*flag.boolValue)(0x2e15ea0)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "nc": (*flag.Flag)(0xc00009edc0)({
    Name: (string) (len=2) "nc",
    Usage: (string) (len=51) "disable output content coloring (ANSI escape codes)",
    Value: (*flag.boolValue)(0x2e15ea3)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=4) "json": (*flag.Flag)(0xc00009ee80)({
    Name: (string) (len=4) "json",
    Usage: (string) (len=34) "write output in JSONL(ines) format",
    Value: (*flag.boolValue)(0x2e15ea5)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=17) "disable-redirects": (*flag.Flag)(0xc00009f440)({
    Name: (string) (len=17) "disable-redirects",
    Usage: (string) (len=36) "disable redirects for http templates",
    Value: (*flag.boolValue)(0x2e15f20)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=16) "update-templates": (*flag.Flag)(0xc000366700)({
    Name: (string) (len=16) "update-templates",
    Usage: (string) (len=50) "update nuclei-templates to latest released version",
    Value: (*flag.boolValue)(0x2e15ea4)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=14) "store-resp-dir": (*flag.Flag)(0xc00009ed40)({
    Name: (string) (len=14) "store-resp-dir",
    Usage: (string) (len=68) "store all request/response passed through nuclei to custom directory",
    Value: (*flag.stringValue)(0x2e15f10)((len=6) output),
    DefValue: (string) (len=6) "output"
   }),
   (string) (len=2) "nm": (*flag.Flag)(0xc00009ef40)({
    Name: (string) (len=2) "nm",
    Usage: (string) (len=46) "disable printing result metadata in cli output",
    Value: (*flag.boolValue)(0x2e15eae)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=14) "matcher-status": (*flag.Flag)(0xc00009f180)({
    Name: (string) (len=14) "matcher-status",
    Usage: (string) (len=28) "display match failure status",
    Value: (*flag.boolValue)(0x2e15ed4)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "fr": (*flag.Flag)(0xc00009f300)({
    Name: (string) (len=2) "fr",
    Usage: (string) (len=45) "enable following redirects for http templates",
    Value: (*flag.boolValue)(0x2e15e90)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=7) "timeout": (*flag.Flag)(0xc00007c000)({
    Name: (string) (len=7) "timeout",
    Usage: (string) (len=38) "time to wait in seconds before timeout",
    Value: (*flag.intValue)(0x2e15e40)(5),
    DefValue: (string) (len=1) "5"
   }),
   (string) (len=2) "ep": (*flag.Flag)(0xc000366500)({
    Name: (string) (len=2) "ep",
    Usage: (string) (len=29) "enable pprof debugging server",
    Value: (*flag.boolValue)(0x2e15f0a)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "hc": (*flag.Flag)(0xc000366600)({
    Name: (string) (len=2) "hc",
    Usage: (string) (len=23) "run diagnostic check up",
    Value: (*flag.boolValue)(0x2e15f38)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=13) "new-templates": (*flag.Flag)(0xc000533480)({
    Name: (string) (len=13) "new-templates",
    Usage: (string) (len=63) "run only new templates added in latest nuclei-templates release",
    Value: (*flag.boolValue)(0x2e15eb1)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=9) "workflows": (*flag.Flag)(0xc000533880)({
    Name: (string) (len=9) "workflows",
    Usage: (string) (len=69) "list of workflow or workflow directory to run (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15b30)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=16) "follow-redirects": (*flag.Flag)(0xc00009f340)({
    Name: (string) (len=16) "follow-redirects",
    Usage: (string) (len=45) "enable following redirects for http templates",
    Value: (*flag.boolValue)(0x2e15e90)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "ni": (*flag.Flag)(0xc00009fc40)({
    Name: (string) (len=2) "ni",
    Usage: (string) (len=72) "disable interactsh server for OAST testing, exclude OAST based templates",
    Value: (*flag.boolValue)(0x2e15ed0)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=1) "p": (*flag.Flag)(0xc000366180)({
    Name: (string) (len=1) "p",
    Usage: (string) (len=64) "list of http/socks5 proxy to use (comma separated or file input)",
    Value: (*goflags.NormalizedOriginalStringSlice)(0x2e15d70)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=12) "enable-pprof": (*flag.Flag)(0xc000366540)({
    Name: (string) (len=12) "enable-pprof",
    Usage: (string) (len=29) "enable pprof debugging server",
    Value: (*flag.boolValue)(0x2e15f0a)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=21) "new-templates-version": (*flag.Flag)(0xc000533680)({
    Name: (string) (len=21) "new-templates-version",
    Usage: (string) (len=43) "run new templates added in specific version",
    Value: (*goflags.CommaSeparatedStringSlice)(0x2e15eb8)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=16) "exclude-severity": (*flag.Flag)(0xc00009e980)({
    Name: (string) (len=16) "exclude-severity",
    Usage: (string) (len=99) "templates to exclude based on severity. Possible values: info, low, medium, high, critical, unknown",
    Value: (*severity.Severities)(0x2e15c18)(),
    DefValue: (string) ""
   }),
   (string) (len=12) "no-timestamp": (*flag.Flag)(0xc00009f040)({
    Name: (string) (len=12) "no-timestamp",
    Usage: (string) (len=40) "disable printing timestamp in cli output",
    Value: (*flag.boolValue)(0x2e15eaf)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=10) "rate-limit": (*flag.Flag)(0xc00009fd00)({
    Name: (string) (len=10) "rate-limit",
    Usage: (string) (len=45) "maximum number of requests to send per second",
    Value: (*flag.intValue)(0x2e15e50)(150),
    DefValue: (string) (len=3) "150"
   }),
   (string) (len=4) "dreq": (*flag.Flag)(0xc000366080)({
    Name: (string) (len=4) "dreq",
    Usage: (string) (len=22) "show all sent requests",
    Value: (*flag.boolValue)(0x2e15e99)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "ud": (*flag.Flag)(0xc000366740)({
    Name: (string) (len=2) "ud",
    Usage: (string) (len=59) "overwrite the default directory to install nuclei-templates",
    Value: (*flag.stringValue)(0x2e15d88)(),
    DefValue: (string) ""
   }),
   (string) (len=12) "template-url": (*flag.Flag)(0xc000533800)({
    Name: (string) (len=12) "template-url",
    Usage: (string) (len=52) "list of template urls to run (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15b78)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=17) "exclude-templates": (*flag.Flag)(0xc000533f80)({
    Name: (string) (len=17) "exclude-templates",
    Usage: (string) (len=65) "template or template directory to exclude (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15ba8)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=3) "rdb": (*flag.Flag)(0xc00009f0c0)({
    Name: (string) (len=3) "rdb",
    Usage: (string) (len=66) "nuclei reporting database (always use this to persist report data)",
    Value: (*flag.stringValue)(0x2e15db8)(),
    DefValue: (string) ""
   }),
   (string) (len=2) "bs": (*flag.Flag)(0xc00009fdc0)({
    Name: (string) (len=2) "bs",
    Usage: (string) (len=63) "maximum number of hosts to be analyzed in parallel per template",
    Value: (*flag.intValue)(0x2e15e20)(25),
    DefValue: (string) (len=2) "25"
   }),
   (string) (len=8) "validate": (*flag.Flag)(0xc000533940)({
    Name: (string) (len=8) "validate",
    Usage: (string) (len=39) "validate the passed templates to nuclei",
    Value: (*flag.boolValue)(0x2e15e9f)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=6) "silent": (*flag.Flag)(0xc00009ed80)({
    Name: (string) (len=6) "silent",
    Usage: (string) (len=21) "display findings only",
    Value: (*flag.boolValue)(0x2e15e9d)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "cc": (*flag.Flag)(0xc00009f7c0)({
    Name: (string) (len=2) "cc",
    Usage: (string) (len=83) "client certificate file (PEM-encoded) used for authenticating against scanned hosts",
    Value: (*flag.stringValue)(0x2e15ed8)(),
    DefValue: (string) ""
   }),
   (string) (len=11) "client-cert": (*flag.Flag)(0xc00009f800)({
    Name: (string) (len=11) "client-cert",
    Usage: (string) (len=83) "client certificate file (PEM-encoded) used for authenticating against scanned hosts",
    Value: (*flag.stringValue)(0x2e15ed8)(),
    DefValue: (string) ""
   }),
   (string) (len=2) "ut": (*flag.Flag)(0xc0003666c0)({
    Name: (string) (len=2) "ut",
    Usage: (string) (len=50) "update nuclei-templates to latest released version",
    Value: (*flag.boolValue)(0x2e15ea4)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=14) "stats-interval": (*flag.Flag)(0xc000366940)({
    Name: (string) (len=14) "stats-interval",
    Usage: (string) (len=61) "number of seconds to wait between showing a statistics update",
    Value: (*flag.intValue)(0x2e15e08)(5),
    DefValue: (string) (len=1) "5"
   }),
   (string) (len=2) "tl": (*flag.Flag)(0xc000533ac0)({
    Name: (string) (len=2) "tl",
    Usage: (string) (len=28) "list all available templates",
    Value: (*flag.boolValue)(0x2e15ea9)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "em": (*flag.Flag)(0xc000533fc0)({
    Name: (string) (len=2) "em",
    Usage: (string) (len=38) "template matchers to exclude in result",
    Value: (*goflags.FileCommaSeparatedStringSlice)(0x2e15bc0)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=16) "exclude-matchers": (*flag.Flag)(0xc00009e000)({
    Name: (string) (len=16) "exclude-matchers",
    Usage: (string) (len=38) "template matchers to exclude in result",
    Value: (*goflags.FileCommaSeparatedStringSlice)(0x2e15bc0)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=12) "exclude-type": (*flag.Flag)(0xc00009eb00)({
    Name: (string) (len=12) "exclude-type",
    Usage: (string) (len=129) "templates to exclude based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois",
    Value: (*types.ProtocolTypes)(0x2e15c60)(),
    DefValue: (string) ""
   }),
   (string) (len=3) "irt": (*flag.Flag)(0xc00007c900)({
    Name: (string) (len=3) "irt",
    Usage: (string) (len=21) "timeout on input read",
    Value: (*flag.durationValue)(0x2e15f40)(3m0s),
    DefValue: (string) (len=4) "3m0s"
   }),
   (string) (len=8) "headless": (*flag.Flag)(0xc00007c9c0)({
    Name: (string) (len=8) "headless",
    Usage: (string) (len=96) "enable templates that require headless browser support (root user on linux will disable sandbox)",
    Value: (*flag.boolValue)(0x2e15e93)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=1) "v": (*flag.Flag)(0xc000366440)({
    Name: (string) (len=1) "v",
    Usage: (string) (len=19) "show verbose output",
    Value: (*flag.boolValue)(0x2e15ea1)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=10) "exclude-id": (*flag.Flag)(0xc000533e40)({
    Name: (string) (len=10) "exclude-id",
    Usage: (string) (len=66) "templates to exclude based on template ids (comma-separated, file)",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15cc0)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=2) "et": (*flag.Flag)(0xc000533f00)({
    Name: (string) (len=2) "et",
    Usage: (string) (len=65) "template or template directory to exclude (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15ba8)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=8) "severity": (*flag.Flag)(0xc00009e080)({
    Name: (string) (len=8) "severity",
    Usage: (string) (len=95) "templates to run based on severity. Possible values: info, low, medium, high, critical, unknown",
    Value: (*severity.Severities)(0x2e15c00)(),
    DefValue: (string) ""
   }),
   (string) (len=3) "irr": (*flag.Flag)(0xc00009eec0)({
    Name: (string) (len=3) "irr",
    Usage: (string) (len=70) "include request/response pairs in the JSONL output (for findings only)",
    Value: (*flag.boolValue)(0x2e15ea6)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=3) "hbs": (*flag.Flag)(0xc00009ff00)({
    Name: (string) (len=3) "hbs",
    Usage: (string) (len=72) "maximum number of headless hosts to be analyzed in parallel per template",
    Value: (*flag.intValue)(0x2e15e30)(10),
    DefValue: (string) (len=2) "10"
   }),
   (string) (len=18) "input-read-timeout": (*flag.Flag)(0xc00007c940)({
    Name: (string) (len=18) "input-read-timeout",
    Usage: (string) (len=21) "timeout on input read",
    Value: (*flag.durationValue)(0x2e15f40)(3m0s),
    DefValue: (string) (len=4) "3m0s"
   }),
   (string) (len=4) "list": (*flag.Flag)(0xc0002a1f40)({
    Name: (string) (len=4) "list",
    Usage: (string) (len=74) "path to file containing a list of target URLs/hosts to scan (one per line)",
    Value: (*flag.stringValue)(0x2e15d38)(),
    DefValue: (string) ""
   }),
   (string) (len=12) "sarif-export": (*flag.Flag)(0xc00009f280)({
    Name: (string) (len=12) "sarif-export",
    Usage: (string) (len=38) "file to export results in SARIF format",
    Value: (*flag.stringValue)(0x2e15de8)(),
    DefValue: (string) ""
   }),
   (string) (len=3) "rlm": (*flag.Flag)(0xc00009fd40)({
    Name: (string) (len=3) "rlm",
    Usage: (string) (len=45) "maximum number of requests to send per minute",
    Value: (*flag.intValue)(0x2e15e58)(0),
    DefValue: (string) (len=1) "0"
   }),
   (string) (len=5) "headc": (*flag.Flag)(0xc00009ff80)({
    Name: (string) (len=5) "headc",
    Usage: (string) (len=63) "maximum number of headless templates to be executed in parallel",
    Value: (*flag.intValue)(0x2e15e38)(10),
    DefValue: (string) (len=2) "10"
   }),
   (string) (len=5) "stats": (*flag.Flag)(0xc000366840)({
    Name: (string) (len=5) "stats",
    Usage: (string) (len=41) "display statistics about the running scan",
    Value: (*flag.boolValue)(0x2e15ea7)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "ca": (*flag.Flag)(0xc00009f8c0)({
    Name: (string) (len=2) "ca",
    Usage: (string) (len=93) "client certificate authority file (PEM-encoded) used for authenticating against scanned hosts",
    Value: (*flag.stringValue)(0x2e15ef8)(),
    DefValue: (string) ""
   }),
   (string) (len=3) "sni": (*flag.Flag)(0xc00009fa00)({
    Name: (string) (len=3) "sni",
    Usage: (string) (len=52) "tls sni hostname to use (default: input domain name)",
    Value: (*flag.stringValue)(0x2e15f28)(),
    DefValue: (string) ""
   }),
   (string) (len=19) "leave-default-ports": (*flag.Flag)(0xc00007c480)({
    Name: (string) (len=19) "leave-default-ports",
    Usage: (string) (len=52) "leave default HTTP/HTTPS ports (eg. host:80,host:443",
    Value: (*flag.boolValue)(0x2e15e9b)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=16) "update-directory": (*flag.Flag)(0xc000366780)({
    Name: (string) (len=16) "update-directory",
    Usage: (string) (len=59) "overwrite the default directory to install nuclei-templates",
    Value: (*flag.stringValue)(0x2e15d88)(),
    DefValue: (string) ""
   }),
   (string) (len=2) "si": (*flag.Flag)(0xc000366900)({
    Name: (string) (len=2) "si",
    Usage: (string) (len=61) "number of seconds to wait between showing a statistics update",
    Value: (*flag.intValue)(0x2e15e08)(5),
    DefValue: (string) (len=1) "5"
   }),
   (string) (len=12) "metrics-port": (*flag.Flag)(0xc000366b00)({
    Name: (string) (len=12) "metrics-port",
    Usage: (string) (len=32) "port to expose nuclei metrics on",
    Value: (*flag.intValue)(0x2e15e10)(9092),
    DefValue: (string) (len=4) "9092"
   }),
   (string) (len=4) "tags": (*flag.Flag)(0xc000533c00)({
    Name: (string) (len=4) "tags",
    Usage: (string) (len=54) "templates to run based on tags (comma-separated, file)",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15b00)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=3) "eid": (*flag.Flag)(0xc000533e00)({
    Name: (string) (len=3) "eid",
    Usage: (string) (len=66) "templates to exclude based on template ids (comma-separated, file)",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15cc0)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=6) "header": (*flag.Flag)(0xc00009f540)({
    Name: (string) (len=6) "header",
    Usage: (string) (len=86) "custom header/cookie to include in all http request in header:value format (cli, file)",
    Value: (*goflags.FileStringSlice)(0x2e15bd8)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=7) "passive": (*flag.Flag)(0xc00009f700)({
    Name: (string) (len=7) "passive",
    Usage: (string) (len=44) "enable passive HTTP response processing mode",
    Value: (*flag.boolValue)(0x2e15e91)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "pi": (*flag.Flag)(0xc000366200)({
    Name: (string) (len=2) "pi",
    Usage: (string) (len=27) "proxy all internal requests",
    Value: (*flag.boolValue)(0x2e15d68)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=1) "m": (*flag.Flag)(0xc000366980)({
    Name: (string) (len=1) "m",
    Usage: (string) (len=31) "expose nuclei metrics on a port",
    Value: (*flag.boolValue)(0x2e15e97)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "as": (*flag.Flag)(0xc0005336c0)({
    Name: (string) (len=2) "as",
    Usage: (string) (len=72) "automatic web scan using wappalyzer technology detection to tags mapping",
    Value: (*flag.boolValue)(0x2e15e9c)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=7) "no-meta": (*flag.Flag)(0xc00009efc0)({
    Name: (string) (len=7) "no-meta",
    Usage: (string) (len=46) "disable printing result metadata in cli output",
    Value: (*flag.boolValue)(0x2e15eae)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=15) "show-match-line": (*flag.Flag)(0xc00009f980)({
    Name: (string) (len=15) "show-match-line",
    Usage: (string) (len=63) "show match lines for file templates, works with extractors only",
    Value: (*flag.boolValue)(0x2e15f09)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=3) "ldp": (*flag.Flag)(0xc00007c440)({
    Name: (string) (len=3) "ldp",
    Usage: (string) (len=52) "leave default HTTP/HTTPS ports (eg. host:80,host:443",
    Value: (*flag.boolValue)(0x2e15e9b)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=12) "health-check": (*flag.Flag)(0xc000366640)({
    Name: (string) (len=12) "health-check",
    Usage: (string) (len=23) "run diagnostic check up",
    Value: (*flag.boolValue)(0x2e15f38)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=7) "metrics": (*flag.Flag)(0xc000366a40)({
    Name: (string) (len=7) "metrics",
    Usage: (string) (len=31) "expose nuclei metrics on a port",
    Value: (*flag.boolValue)(0x2e15e97)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=9) "client-ca": (*flag.Flag)(0xc00009f900)({
    Name: (string) (len=9) "client-ca",
    Usage: (string) (len=93) "client certificate authority file (PEM-encoded) used for authenticating against scanned hosts",
    Value: (*flag.stringValue)(0x2e15ef8)(),
    DefValue: (string) ""
   }),
   (string) (len=7) "retries": (*flag.Flag)(0xc00007c400)({
    Name: (string) (len=7) "retries",
    Usage: (string) (len=41) "number of times to retry a failed request",
    Value: (*flag.intValue)(0x2e15e48)(1),
    DefValue: (string) (len=1) "1"
   }),
   (string) (len=2) "it": (*flag.Flag)(0xc000533e80)({
    Name: (string) (len=2) "it",
    Usage: (string) (len=85) "templates to be executed even if they are excluded either by default or configuration",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15c90)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=1) "V": (*flag.Flag)(0xc00009f580)({
    Name: (string) (len=1) "V",
    Usage: (string) (len=31) "custom vars in key=value format",
    Value: (*goflags.RuntimeMap)(0x2e15bf0)({}),
    DefValue: (string) (len=2) "{}"
   }),
   (string) (len=3) "var": (*flag.Flag)(0xc00009f5c0)({
    Name: (string) (len=3) "var",
    Usage: (string) (len=31) "custom vars in key=value format",
    Value: (*goflags.RuntimeMap)(0x2e15bf0)({}),
    DefValue: (string) (len=2) "{}"
   }),
   (string) (len=16) "system-resolvers": (*flag.Flag)(0xc00009f6c0)({
    Name: (string) (len=16) "system-resolvers",
    Usage: (string) (len=42) "use system DNS resolving as error fallback",
    Value: (*flag.boolValue)(0x2e15e96)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "ck": (*flag.Flag)(0xc00009f840)({
    Name: (string) (len=2) "ck",
    Usage: (string) (len=75) "client key file (PEM-encoded) used for authenticating against scanned hosts",
    Value: (*flag.stringValue)(0x2e15ee8)(),
    DefValue: (string) ""
   }),
   (string) (len=10) "client-key": (*flag.Flag)(0xc00009f880)({
    Name: (string) (len=10) "client-key",
    Usage: (string) (len=75) "client key file (PEM-encoded) used for authenticating against scanned hosts",
    Value: (*flag.stringValue)(0x2e15ee8)(),
    DefValue: (string) ""
   }),
   (string) (len=12) "show-browser": (*flag.Flag)(0xc00007ca80)({
    Name: (string) (len=12) "show-browser",
    Usage: (string) (len=72) "show the browser on the screen when running templates with headless mode",
    Value: (*flag.boolValue)(0x2e15e94)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=13) "report-config": (*flag.Flag)(0xc00009f4c0)({
    Name: (string) (len=13) "report-config",
    Usage: (string) (len=42) "nuclei reporting module configuration file",
    Value: (*flag.stringValue)(0x2e15dc8)(),
    DefValue: (string) ""
   }),
   (string) (len=8) "no-stdin": (*flag.Flag)(0xc00007c980)({
    Name: (string) (len=8) "no-stdin",
    Usage: (string) (len=24) "Disable Stdin processing",
    Value: (*flag.boolValue)(0x2e15f48)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "sb": (*flag.Flag)(0xc00007ca40)({
    Name: (string) (len=2) "sb",
    Usage: (string) (len=72) "show the browser on the screen when running templates with headless mode",
    Value: (*flag.boolValue)(0x2e15e94)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "me": (*flag.Flag)(0xc00009f1c0)({
    Name: (string) (len=2) "me",
    Usage: (string) (len=46) "directory to export results in markdown format",
    Value: (*flag.stringValue)(0x2e15dd8)(),
    DefValue: (string) ""
   }),
   (string) (len=2) "dr": (*flag.Flag)(0xc00009f400)({
    Name: (string) (len=2) "dr",
    Usage: (string) (len=36) "disable redirects for http templates",
    Value: (*flag.boolValue)(0x2e15f20)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=14) "proxy-internal": (*flag.Flag)(0xc000366240)({
    Name: (string) (len=14) "proxy-internal",
    Usage: (string) (len=27) "proxy all internal requests",
    Value: (*flag.boolValue)(0x2e15d68)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=9) "error-log": (*flag.Flag)(0xc000366340)({
    Name: (string) (len=9) "error-log",
    Usage: (string) (len=37) "file to write sent requests error log",
    Value: (*flag.stringValue)(0x2e15da8)(),
    DefValue: (string) ""
   }),
   (string) (len=2) "hm": (*flag.Flag)(0xc0003663c0)({
    Name: (string) (len=2) "hm",
    Usage: (string) (len=29) "enable nuclei hang monitoring",
    Value: (*flag.boolValue)(0x2e15eaa)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "vv": (*flag.Flag)(0xc0003664c0)({
    Name: (string) (len=2) "vv",
    Usage: (string) (len=33) "display templates loaded for scan",
    Value: (*flag.boolValue)(0x2e15ea2)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=6) "update": (*flag.Flag)(0xc000366680)({
    Name: (string) (len=6) "update",
    Usage: (string) (len=51) "update nuclei engine to the latest released version",
    Value: (*flag.boolValue)(0x2e15ed1)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=14) "automatic-scan": (*flag.Flag)(0xc000533700)({
    Name: (string) (len=14) "automatic-scan",
    Usage: (string) (len=72) "automatic web scan using wappalyzer technology detection to tags mapping",
    Value: (*flag.boolValue)(0x2e15e9c)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "pt": (*flag.Flag)(0xc00009ea00)({
    Name: (string) (len=2) "pt",
    Usage: (string) (len=125) "templates to run based on protocol type. Possible values: dns, file, http, headless, network, workflow, ssl, websocket, whois",
    Value: (*types.ProtocolTypes)(0x2e15c48)(),
    DefValue: (string) ""
   }),
   (string) (len=1) "o": (*flag.Flag)(0xc00009eb80)({
    Name: (string) (len=1) "o",
    Usage: (string) (len=49) "output file to write found issues/vulnerabilities",
    Value: (*flag.stringValue)(0x2e15d58)(),
    DefValue: (string) ""
   }),
   (string) (len=8) "no-color": (*flag.Flag)(0xc00009ee40)({
    Name: (string) (len=8) "no-color",
    Usage: (string) (len=51) "disable output content coloring (ANSI escape codes)",
    Value: (*flag.boolValue)(0x2e15ea3)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=5) "dresp": (*flag.Flag)(0xc000366100)({
    Name: (string) (len=5) "dresp",
    Usage: (string) (len=27) "show all received responses",
    Value: (*flag.boolValue)(0x2e15e9a)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=4) "elog": (*flag.Flag)(0xc000366300)({
    Name: (string) (len=4) "elog",
    Usage: (string) (len=37) "file to write sent requests error log",
    Value: (*flag.stringValue)(0x2e15da8)(),
    DefValue: (string) ""
   }),
   (string) (len=6) "stream": (*flag.Flag)(0xc00007c8c0)({
    Name: (string) (len=6) "stream",
    Usage: (string) (len=57) "stream mode - start elaborating without sorting the input",
    Value: (*flag.boolValue)(0x2e15ead)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=1) "l": (*flag.Flag)(0xc0002a1f00)({
    Name: (string) (len=1) "l",
    Usage: (string) (len=74) "path to file containing a list of target URLs/hosts to scan (one per line)",
    Value: (*flag.stringValue)(0x2e15d38)(),
    DefValue: (string) ""
   }),
   (string) (len=15) "markdown-export": (*flag.Flag)(0xc00009f200)({
    Name: (string) (len=15) "markdown-export",
    Usage: (string) (len=46) "directory to export results in markdown format",
    Value: (*flag.stringValue)(0x2e15dd8)(),
    DefValue: (string) ""
   }),
   (string) (len=9) "resolvers": (*flag.Flag)(0xc00009f640)({
    Name: (string) (len=9) "resolvers",
    Usage: (string) (len=40) "file containing resolver list for nuclei",
    Value: (*flag.stringValue)(0x2e15df8)(),
    DefValue: (string) ""
   }),
   (string) (len=26) "interactions-poll-duration": (*flag.Flag)(0xc00009fbc0)({
    Name: (string) (len=26) "interactions-poll-duration",
    Usage: (string) (len=62) "number of seconds to wait before each interaction poll request",
    Value: (*flag.intValue)(0x2e15e70)(5),
    DefValue: (string) (len=1) "5"
   }),
   (string) (len=14) "max-host-error": (*flag.Flag)(0xc00007c740)({
    Name: (string) (len=14) "max-host-error",
    Usage: (string) (len=47) "max errors for a host before skipping from scan",
    Value: (*flag.intValue)(0x2e15e18)(30),
    DefValue: (string) (len=2) "30"
   }),
   (string) (len=12) "project-path": (*flag.Flag)(0xc00007c7c0)({
    Name: (string) (len=12) "project-path",
    Usage: (string) (len=27) "set a specific project path",
    Value: (*flag.stringValue)(0x2e15cf0)((len=35) C:\Users\welcome\AppData\Local\Temp),
    DefValue: (string) (len=35) "C:\\Users\\welcome\\AppData\\Local\\Temp"
   }),
   (string) (len=1) "w": (*flag.Flag)(0xc000533840)({
    Name: (string) (len=1) "w",
    Usage: (string) (len=69) "list of workflow or workflow directory to run (comma-separated, file)",
    Value: (*goflags.FileOriginalNormalizedStringSlice)(0x2e15b30)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=5) "etags": (*flag.Flag)(0xc000533c40)({
    Name: (string) (len=5) "etags",
    Usage: (string) (len=58) "templates to exclude based on tags (comma-separated, file)",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15b18)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=12) "exclude-tags": (*flag.Flag)(0xc000533c80)({
    Name: (string) (len=12) "exclude-tags",
    Usage: (string) (len=58) "templates to exclude based on tags (comma-separated, file)",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15b18)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=9) "bulk-size": (*flag.Flag)(0xc00009fe00)({
    Name: (string) (len=9) "bulk-size",
    Usage: (string) (len=63) "maximum number of hosts to be analyzed in parallel per template",
    Value: (*flag.intValue)(0x2e15e20)(25),
    DefValue: (string) (len=2) "25"
   }),
   (string) (len=3) "mhe": (*flag.Flag)(0xc00007c4c0)({
    Name: (string) (len=3) "mhe",
    Usage: (string) (len=47) "max errors for a host before skipping from scan",
    Value: (*flag.intValue)(0x2e15e18)(30),
    DefValue: (string) (len=2) "30"
   }),
   (string) (len=20) "disable-update-check": (*flag.Flag)(0xc000366800)({
    Name: (string) (len=20) "disable-update-check",
    Usage: (string) (len=47) "disable automatic nuclei/templates update check",
    Value: (*flag.boolValue)(0x2e15ed2)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "sc": (*flag.Flag)(0xc00007cac0)({
    Name: (string) (len=2) "sc",
    Usage: (string) (len=62) "Use local installed chrome browser instead of nuclei installed",
    Value: (*flag.boolValue)(0x2e15e95)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=3) "duc": (*flag.Flag)(0xc0003667c0)({
    Name: (string) (len=3) "duc",
    Usage: (string) (len=47) "disable automatic nuclei/templates update check",
    Value: (*flag.boolValue)(0x2e15ed2)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=1) "u": (*flag.Flag)(0xc0002a1e80)({
    Name: (string) (len=1) "u",
    Usage: (string) (len=25) "target URLs/hosts to scan",
    Value: (*goflags.StringSlice)(0x2e15d20)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=10) "include-rr": (*flag.Flag)(0xc00009ef00)({
    Name: (string) (len=10) "include-rr",
    Usage: (string) (len=70) "include request/response pairs in the JSONL output (for findings only)",
    Value: (*flag.boolValue)(0x2e15ea6)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "ev": (*flag.Flag)(0xc00009f740)({
    Name: (string) (len=2) "ev",
    Usage: (string) (len=51) "enable environment variables to be used in template",
    Value: (*flag.boolValue)(0x2e15ed3)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=8) "env-vars": (*flag.Flag)(0xc00009f780)({
    Name: (string) (len=8) "env-vars",
    Usage: (string) (len=51) "enable environment variables to be used in template",
    Value: (*flag.boolValue)(0x2e15ed3)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=6) "itoken": (*flag.Flag)(0xc00009fac0)({
    Name: (string) (len=6) "itoken",
    Usage: (string) (len=54) "authentication token for self-hosted interactsh server",
    Value: (*flag.stringValue)(0x2e15d10)(),
    DefValue: (string) ""
   }),
   (string) (len=11) "concurrency": (*flag.Flag)(0xc00009fe80)({
    Name: (string) (len=11) "concurrency",
    Usage: (string) (len=54) "maximum number of templates to be executed in parallel",
    Value: (*flag.intValue)(0x2e15e28)(25),
    DefValue: (string) (len=2) "25"
   }),
   (string) (len=6) "config": (*flag.Flag)(0xc00009f2c0)({
    Name: (string) (len=6) "config",
    Usage: (string) (len=37) "path to the nuclei configuration file",
    Value: (*flag.stringValue)(0x2e0e4e0)(),
    DefValue: (string) ""
   }),
   (string) (len=21) "interactions-eviction": (*flag.Flag)(0xc00009fb80)({
    Name: (string) (len=21) "interactions-eviction",
    Usage: (string) (len=61) "number of seconds to wait before evicting requests from cache",
    Value: (*flag.intValue)(0x2e15e78)(60),
    DefValue: (string) (len=2) "60"
   }),
   (string) (len=7) "verbose": (*flag.Flag)(0xc000366480)({
    Name: (string) (len=7) "verbose",
    Usage: (string) (len=19) "show verbose output",
    Value: (*flag.boolValue)(0x2e15ea1)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "se": (*flag.Flag)(0xc00009f240)({
    Name: (string) (len=2) "se",
    Usage: (string) (len=38) "file to export results in SARIF format",
    Value: (*flag.stringValue)(0x2e15de8)(),
    DefValue: (string) ""
   }),
   (string) (len=1) "r": (*flag.Flag)(0xc00009f600)({
    Name: (string) (len=1) "r",
    Usage: (string) (len=40) "file containing resolver list for nuclei",
    Value: (*flag.stringValue)(0x2e15df8)(),
    DefValue: (string) ""
   }),
   (string) (len=18) "headless-bulk-size": (*flag.Flag)(0xc00009ff40)({
    Name: (string) (len=18) "headless-bulk-size",
    Usage: (string) (len=72) "maximum number of headless hosts to be analyzed in parallel per template",
    Value: (*flag.intValue)(0x2e15e30)(10),
    DefValue: (string) (len=2) "10"
   }),
   (string) (len=5) "proxy": (*flag.Flag)(0xc0003661c0)({
    Name: (string) (len=5) "proxy",
    Usage: (string) (len=64) "list of http/socks5 proxy to use (comma separated or file input)",
    Value: (*goflags.NormalizedOriginalStringSlice)(0x2e15d70)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=7) "version": (*flag.Flag)(0xc000366380)({
    Name: (string) (len=7) "version",
    Usage: (string) (len=19) "show nuclei version",
    Value: (*flag.boolValue)(0x2e15e9e)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=3) "srd": (*flag.Flag)(0xc00009ed00)({
    Name: (string) (len=3) "srd",
    Usage: (string) (len=68) "store all request/response passed through nuclei to custom directory",
    Value: (*flag.stringValue)(0x2e15f10)((len=6) output),
    DefValue: (string) (len=6) "output"
   }),
   (string) (len=9) "debug-req": (*flag.Flag)(0xc0003660c0)({
    Name: (string) (len=9) "debug-req",
    Usage: (string) (len=22) "show all sent requests",
    Value: (*flag.boolValue)(0x2e15e99)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=2) "mp": (*flag.Flag)(0xc000366ac0)({
    Name: (string) (len=2) "mp",
    Usage: (string) (len=32) "port to expose nuclei metrics on",
    Value: (*flag.intValue)(0x2e15e10)(9092),
    DefValue: (string) (len=4) "9092"
   }),
   (string) (len=1) "a": (*flag.Flag)(0xc000533b40)({
    Name: (string) (len=1) "a",
    Usage: (string) (len=57) "templates to run based on authors (comma-separated, file)",
    Value: (*goflags.FileNormalizedStringSlice)(0x2e15c30)([]),
    DefValue: (string) (len=2) "[]"
   }),
   (string) (len=6) "output": (*flag.Flag)(0xc00009ec00)({
    Name: (string) (len=6) "output",
    Usage: (string) (len=49) "output file to write found issues/vulnerabilities",
    Value: (*flag.stringValue)(0x2e15d58)(),
    DefValue: (string) ""
   }),
   (string) (len=2) "rc": (*flag.Flag)(0xc00009f480)({
    Name: (string) (len=2) "rc",
    Usage: (string) (len=42) "nuclei reporting module configuration file",
    Value: (*flag.stringValue)(0x2e15dc8)(),
    DefValue: (string) ""
   }),
   (string) (len=7) "project": (*flag.Flag)(0xc00007c780)({
    Name: (string) (len=7) "project",
    Usage: (string) (len=65) "use a project folder to avoid sending same request multiple times",
    Value: (*flag.boolValue)(0x2e15eb0)(false),
    DefValue: (string) (len=5) "false"
   }),
   (string) (len=4) "tlog": (*flag.Flag)(0xc000366280)({
    Name: (string) (len=4) "tlog",
    Usage: (string) (len=37) "file to write sent requests trace log",
    Value: (*flag.stringValue)(0x2e15d98)(),
    DefValue: (string) ""
   })
  },
  args: ([]string) {
  },
  errorHandling: (flag.ErrorHandling) 1,
  output: (io.Writer) <nil>
 }),
 OtherOptionsGroupName: (string) (len=13) "other options",
 configOnlyKeys: (goflags.InsertionOrderedMap) {
  values: (map[string]*goflags.FlagData) (len=1) {
   (string) (len=22) "remote-template-domain": (*goflags.FlagData)(0xc0004652d0)({
    usage: (string) (len=49) "allowed domain list to load remote templates from",
    short: (string) "",
    long: (string) (len=22) "remote-template-domain",
    group: (string) (len=9) "templates",
    defaultValue: (goflags.StringSlice) (len=1 cap=1) ["api.nuclei.sh"],
    skipMarshal: (bool) false,
    field: (*goflags.StringSlice)(0x2e15b90)((len=1 cap=1) ["api.nuclei.sh"])
   })
  },
  keys: ([]string) (len=1 cap=1) {
   (string) (len=22) "remote-template-domain"
  }
 }
})
